
PROJE_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001190  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800124c  0800124c  0001124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080012a4  080012a4  000112a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012a8  080012a8  000112a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080012ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  080012b0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000024  080012b0  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000123a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000004ff  00000000  00000000  00021266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000178  00000000  00000000  00021768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000140  00000000  00000000  000218e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00000fdd  00000000  00000000  00021a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000860  00000000  00000000  000229fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  0002325d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000444  00000000  00000000  000232b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001234 	.word	0x08001234

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001234 	.word	0x08001234

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <delay>:
static uint32_t tDelay;
extern uint32_t SystemCoreClock;


/*delay function*/
void delay(volatile uint32_t s){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	for(; s>0; s--);
 8000334:	e002      	b.n	800033c <delay+0x10>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3b01      	subs	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1f9      	bne.n	8000336 <delay+0xa>
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b002      	add	sp, #8
 800034a:	bd80      	pop	{r7, pc}

0800034c <openClock>:

/*COOL FUNCTIONS*/
void openClock(char port){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	0002      	movs	r2, r0
 8000354:	1dfb      	adds	r3, r7, #7
 8000356:	701a      	strb	r2, [r3, #0]

	switch(port){
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	3b41      	subs	r3, #65	; 0x41
 800035e:	2b05      	cmp	r3, #5
 8000360:	d827      	bhi.n	80003b2 <openClock+0x66>
 8000362:	009a      	lsls	r2, r3, #2
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <openClock+0x70>)
 8000366:	18d3      	adds	r3, r2, r3
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	469f      	mov	pc, r3
	case 'A':
		RCC-> IOPENR |= (1U << 0);
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <openClock+0x74>)
 800036e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <openClock+0x74>)
 8000372:	2101      	movs	r1, #1
 8000374:	430a      	orrs	r2, r1
 8000376:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000378:	e01b      	b.n	80003b2 <openClock+0x66>

	case 'B':
		RCC->IOPENR |= (1U << 1);
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <openClock+0x74>)
 800037c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <openClock+0x74>)
 8000380:	2102      	movs	r1, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000386:	e014      	b.n	80003b2 <openClock+0x66>

	case 'C':
		RCC->IOPENR |= (1U << 2);
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <openClock+0x74>)
 800038a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <openClock+0x74>)
 800038e:	2104      	movs	r1, #4
 8000390:	430a      	orrs	r2, r1
 8000392:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000394:	e00d      	b.n	80003b2 <openClock+0x66>

	case 'D':
		RCC->IOPENR |= (1U << 3);
 8000396:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <openClock+0x74>)
 8000398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <openClock+0x74>)
 800039c:	2108      	movs	r1, #8
 800039e:	430a      	orrs	r2, r1
 80003a0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80003a2:	e006      	b.n	80003b2 <openClock+0x66>

	case 'F':
		RCC->IOPENR |= (1U << 5);
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <openClock+0x74>)
 80003a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <openClock+0x74>)
 80003aa:	2120      	movs	r1, #32
 80003ac:	430a      	orrs	r2, r1
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80003b0:	46c0      	nop			; (mov r8, r8)

	}
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b002      	add	sp, #8
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	0800124c 	.word	0x0800124c
 80003c0:	40021000 	.word	0x40021000

080003c4 <setMode>:

void setMode(char port, uint32_t num, char IO){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6039      	str	r1, [r7, #0]
 80003cc:	0011      	movs	r1, r2
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	1c02      	adds	r2, r0, #0
 80003d2:	701a      	strb	r2, [r3, #0]
 80003d4:	1dbb      	adds	r3, r7, #6
 80003d6:	1c0a      	adds	r2, r1, #0
 80003d8:	701a      	strb	r2, [r3, #0]

	switch(port){
 80003da:	1dfb      	adds	r3, r7, #7
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3b41      	subs	r3, #65	; 0x41
 80003e0:	2b05      	cmp	r3, #5
 80003e2:	d900      	bls.n	80003e6 <setMode+0x22>
 80003e4:	e140      	b.n	8000668 <setMode+0x2a4>
 80003e6:	009a      	lsls	r2, r3, #2
 80003e8:	4ba1      	ldr	r3, [pc, #644]	; (8000670 <setMode+0x2ac>)
 80003ea:	18d3      	adds	r3, r2, r3
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	469f      	mov	pc, r3
	case 'A':

		if(num == 2 || num == 3){//dont touch PA2 and PA3 ports even user want to change them
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d100      	bne.n	80003f8 <setMode+0x34>
 80003f6:	e137      	b.n	8000668 <setMode+0x2a4>
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	d100      	bne.n	8000400 <setMode+0x3c>
 80003fe:	e133      	b.n	8000668 <setMode+0x2a4>
		break;
		}


		GPIOA-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 8000400:	23a0      	movs	r3, #160	; 0xa0
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	2103      	movs	r1, #3
 800040c:	4099      	lsls	r1, r3
 800040e:	000b      	movs	r3, r1
 8000410:	43d9      	mvns	r1, r3
 8000412:	23a0      	movs	r3, #160	; 0xa0
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	400a      	ands	r2, r1
 8000418:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 800041a:	1dbb      	adds	r3, r7, #6
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b4f      	cmp	r3, #79	; 0x4f
 8000420:	d10b      	bne.n	800043a <setMode+0x76>
			GPIOA-> MODER |= (1U << num*2);
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	6819      	ldr	r1, [r3, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	2201      	movs	r2, #1
 800042e:	409a      	lsls	r2, r3
 8000430:	23a0      	movs	r3, #160	; 0xa0
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	430a      	orrs	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOA -> MODER |= (2U << (num*2));

		}

		break;
 8000438:	e10d      	b.n	8000656 <setMode+0x292>
		else if(IO == 'I'){
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b49      	cmp	r3, #73	; 0x49
 8000440:	d100      	bne.n	8000444 <setMode+0x80>
 8000442:	e108      	b.n	8000656 <setMode+0x292>
		else if(IO == 'A'){//analog input mode
 8000444:	1dbb      	adds	r3, r7, #6
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b41      	cmp	r3, #65	; 0x41
 800044a:	d10b      	bne.n	8000464 <setMode+0xa0>
			GPIOA-> MODER |= (3U << num*2);
 800044c:	23a0      	movs	r3, #160	; 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	6819      	ldr	r1, [r3, #0]
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	2203      	movs	r2, #3
 8000458:	409a      	lsls	r2, r3
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	430a      	orrs	r2, r1
 8000460:	601a      	str	r2, [r3, #0]
		break;
 8000462:	e0f8      	b.n	8000656 <setMode+0x292>
		else if(IO == 'F'){//alternate function mode
 8000464:	1dbb      	adds	r3, r7, #6
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b46      	cmp	r3, #70	; 0x46
 800046a:	d000      	beq.n	800046e <setMode+0xaa>
 800046c:	e0f3      	b.n	8000656 <setMode+0x292>
			GPIOA -> MODER |= (2U << (num*2));
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	6819      	ldr	r1, [r3, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	2202      	movs	r2, #2
 800047a:	409a      	lsls	r2, r3
 800047c:	23a0      	movs	r3, #160	; 0xa0
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	430a      	orrs	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
		break;
 8000484:	e0e7      	b.n	8000656 <setMode+0x292>

	case 'B':

		GPIOB-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 8000486:	4b7b      	ldr	r3, [pc, #492]	; (8000674 <setMode+0x2b0>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	2103      	movs	r1, #3
 8000490:	4099      	lsls	r1, r3
 8000492:	000b      	movs	r3, r1
 8000494:	43d9      	mvns	r1, r3
 8000496:	4b77      	ldr	r3, [pc, #476]	; (8000674 <setMode+0x2b0>)
 8000498:	400a      	ands	r2, r1
 800049a:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b4f      	cmp	r3, #79	; 0x4f
 80004a2:	d109      	bne.n	80004b8 <setMode+0xf4>
			GPIOB-> MODER |= (1U << num*2);
 80004a4:	4b73      	ldr	r3, [pc, #460]	; (8000674 <setMode+0x2b0>)
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	2201      	movs	r2, #1
 80004ae:	409a      	lsls	r2, r3
 80004b0:	4b70      	ldr	r3, [pc, #448]	; (8000674 <setMode+0x2b0>)
 80004b2:	430a      	orrs	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOB -> MODER |= (2U << (num*2));

		}

		break;
 80004b6:	e0d0      	b.n	800065a <setMode+0x296>
		else if(IO == 'I'){
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b49      	cmp	r3, #73	; 0x49
 80004be:	d100      	bne.n	80004c2 <setMode+0xfe>
 80004c0:	e0cb      	b.n	800065a <setMode+0x296>
		else if(IO == 'A'){//analog input mode
 80004c2:	1dbb      	adds	r3, r7, #6
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b41      	cmp	r3, #65	; 0x41
 80004c8:	d109      	bne.n	80004de <setMode+0x11a>
			GPIOB-> MODER |= (3U << num*2);
 80004ca:	4b6a      	ldr	r3, [pc, #424]	; (8000674 <setMode+0x2b0>)
 80004cc:	6819      	ldr	r1, [r3, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2203      	movs	r2, #3
 80004d4:	409a      	lsls	r2, r3
 80004d6:	4b67      	ldr	r3, [pc, #412]	; (8000674 <setMode+0x2b0>)
 80004d8:	430a      	orrs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
		break;
 80004dc:	e0bd      	b.n	800065a <setMode+0x296>
		else if(IO == 'F'){//alternate function mode
 80004de:	1dbb      	adds	r3, r7, #6
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b46      	cmp	r3, #70	; 0x46
 80004e4:	d000      	beq.n	80004e8 <setMode+0x124>
 80004e6:	e0b8      	b.n	800065a <setMode+0x296>
			GPIOB -> MODER |= (2U << (num*2));
 80004e8:	4b62      	ldr	r3, [pc, #392]	; (8000674 <setMode+0x2b0>)
 80004ea:	6819      	ldr	r1, [r3, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2202      	movs	r2, #2
 80004f2:	409a      	lsls	r2, r3
 80004f4:	4b5f      	ldr	r3, [pc, #380]	; (8000674 <setMode+0x2b0>)
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
		break;
 80004fa:	e0ae      	b.n	800065a <setMode+0x296>

	case 'C':
		GPIOC-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 80004fc:	4b5e      	ldr	r3, [pc, #376]	; (8000678 <setMode+0x2b4>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	2103      	movs	r1, #3
 8000506:	4099      	lsls	r1, r3
 8000508:	000b      	movs	r3, r1
 800050a:	43d9      	mvns	r1, r3
 800050c:	4b5a      	ldr	r3, [pc, #360]	; (8000678 <setMode+0x2b4>)
 800050e:	400a      	ands	r2, r1
 8000510:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b4f      	cmp	r3, #79	; 0x4f
 8000518:	d109      	bne.n	800052e <setMode+0x16a>
			GPIOC-> MODER |= (1U << num*2);
 800051a:	4b57      	ldr	r3, [pc, #348]	; (8000678 <setMode+0x2b4>)
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	2201      	movs	r2, #1
 8000524:	409a      	lsls	r2, r3
 8000526:	4b54      	ldr	r3, [pc, #336]	; (8000678 <setMode+0x2b4>)
 8000528:	430a      	orrs	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOC -> MODER |= (2U << (num*2));

		}

		break;
 800052c:	e097      	b.n	800065e <setMode+0x29a>
		else if(IO == 'I'){
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b49      	cmp	r3, #73	; 0x49
 8000534:	d100      	bne.n	8000538 <setMode+0x174>
 8000536:	e092      	b.n	800065e <setMode+0x29a>
		else if(IO == 'A'){//analog input mode
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b41      	cmp	r3, #65	; 0x41
 800053e:	d109      	bne.n	8000554 <setMode+0x190>
			GPIOC-> MODER |= (3U << num*2);
 8000540:	4b4d      	ldr	r3, [pc, #308]	; (8000678 <setMode+0x2b4>)
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	2203      	movs	r2, #3
 800054a:	409a      	lsls	r2, r3
 800054c:	4b4a      	ldr	r3, [pc, #296]	; (8000678 <setMode+0x2b4>)
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
		break;
 8000552:	e084      	b.n	800065e <setMode+0x29a>
		else if(IO == 'F'){//alternate function mode
 8000554:	1dbb      	adds	r3, r7, #6
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b46      	cmp	r3, #70	; 0x46
 800055a:	d000      	beq.n	800055e <setMode+0x19a>
 800055c:	e07f      	b.n	800065e <setMode+0x29a>
			GPIOC -> MODER |= (2U << (num*2));
 800055e:	4b46      	ldr	r3, [pc, #280]	; (8000678 <setMode+0x2b4>)
 8000560:	6819      	ldr	r1, [r3, #0]
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	2202      	movs	r2, #2
 8000568:	409a      	lsls	r2, r3
 800056a:	4b43      	ldr	r3, [pc, #268]	; (8000678 <setMode+0x2b4>)
 800056c:	430a      	orrs	r2, r1
 800056e:	601a      	str	r2, [r3, #0]
		break;
 8000570:	e075      	b.n	800065e <setMode+0x29a>

	case 'D':
		GPIOD-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 8000572:	4b42      	ldr	r3, [pc, #264]	; (800067c <setMode+0x2b8>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	2103      	movs	r1, #3
 800057c:	4099      	lsls	r1, r3
 800057e:	000b      	movs	r3, r1
 8000580:	43d9      	mvns	r1, r3
 8000582:	4b3e      	ldr	r3, [pc, #248]	; (800067c <setMode+0x2b8>)
 8000584:	400a      	ands	r2, r1
 8000586:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b4f      	cmp	r3, #79	; 0x4f
 800058e:	d109      	bne.n	80005a4 <setMode+0x1e0>
			GPIOD-> MODER |= (1U << num*2);
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <setMode+0x2b8>)
 8000592:	6819      	ldr	r1, [r3, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2201      	movs	r2, #1
 800059a:	409a      	lsls	r2, r3
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <setMode+0x2b8>)
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOD -> MODER |= (2U << (num*2));

		}

		break;
 80005a2:	e05e      	b.n	8000662 <setMode+0x29e>
		else if(IO == 'I'){
 80005a4:	1dbb      	adds	r3, r7, #6
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b49      	cmp	r3, #73	; 0x49
 80005aa:	d05a      	beq.n	8000662 <setMode+0x29e>
		else if(IO == 'A'){//analog input mode
 80005ac:	1dbb      	adds	r3, r7, #6
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b41      	cmp	r3, #65	; 0x41
 80005b2:	d109      	bne.n	80005c8 <setMode+0x204>
			GPIOD-> MODER |= (3U << num*2);
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <setMode+0x2b8>)
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	2203      	movs	r2, #3
 80005be:	409a      	lsls	r2, r3
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <setMode+0x2b8>)
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]
		break;
 80005c6:	e04c      	b.n	8000662 <setMode+0x29e>
		else if(IO == 'F'){//alternate function mode
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b46      	cmp	r3, #70	; 0x46
 80005ce:	d148      	bne.n	8000662 <setMode+0x29e>
			GPIOD -> MODER |= (2U << (num*2));
 80005d0:	4b2a      	ldr	r3, [pc, #168]	; (800067c <setMode+0x2b8>)
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	2202      	movs	r2, #2
 80005da:	409a      	lsls	r2, r3
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <setMode+0x2b8>)
 80005de:	430a      	orrs	r2, r1
 80005e0:	601a      	str	r2, [r3, #0]
		break;
 80005e2:	e03e      	b.n	8000662 <setMode+0x29e>

	case 'F':
		GPIOF-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <setMode+0x2bc>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	4099      	lsls	r1, r3
 80005f0:	000b      	movs	r3, r1
 80005f2:	43d9      	mvns	r1, r3
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <setMode+0x2bc>)
 80005f6:	400a      	ands	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 80005fa:	1dbb      	adds	r3, r7, #6
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b4f      	cmp	r3, #79	; 0x4f
 8000600:	d109      	bne.n	8000616 <setMode+0x252>
			GPIOF-> MODER |= (1U << num*2);
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <setMode+0x2bc>)
 8000604:	6819      	ldr	r1, [r3, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	2201      	movs	r2, #1
 800060c:	409a      	lsls	r2, r3
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <setMode+0x2bc>)
 8000610:	430a      	orrs	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOF -> MODER |= (2U << (num*2));

		}

		break;
 8000614:	e027      	b.n	8000666 <setMode+0x2a2>
		else if(IO == 'I'){
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b49      	cmp	r3, #73	; 0x49
 800061c:	d023      	beq.n	8000666 <setMode+0x2a2>
		else if(IO == 'A'){//analog input mode
 800061e:	1dbb      	adds	r3, r7, #6
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b41      	cmp	r3, #65	; 0x41
 8000624:	d109      	bne.n	800063a <setMode+0x276>
			GPIOF-> MODER |= (3U << num*2);
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <setMode+0x2bc>)
 8000628:	6819      	ldr	r1, [r3, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	2203      	movs	r2, #3
 8000630:	409a      	lsls	r2, r3
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <setMode+0x2bc>)
 8000634:	430a      	orrs	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
		break;
 8000638:	e015      	b.n	8000666 <setMode+0x2a2>
		else if(IO == 'F'){//alternate function mode
 800063a:	1dbb      	adds	r3, r7, #6
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b46      	cmp	r3, #70	; 0x46
 8000640:	d111      	bne.n	8000666 <setMode+0x2a2>
			GPIOF -> MODER |= (2U << (num*2));
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <setMode+0x2bc>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	2202      	movs	r2, #2
 800064c:	409a      	lsls	r2, r3
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <setMode+0x2bc>)
 8000650:	430a      	orrs	r2, r1
 8000652:	601a      	str	r2, [r3, #0]
		break;
 8000654:	e007      	b.n	8000666 <setMode+0x2a2>
		break;
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	e006      	b.n	8000668 <setMode+0x2a4>
		break;
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	e004      	b.n	8000668 <setMode+0x2a4>
		break;
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	e002      	b.n	8000668 <setMode+0x2a4>
		break;
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	e000      	b.n	8000668 <setMode+0x2a4>
		break;
 8000666:	46c0      	nop			; (mov r8, r8)

	}


}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	08001264 	.word	0x08001264
 8000674:	50000400 	.word	0x50000400
 8000678:	50000800 	.word	0x50000800
 800067c:	50000c00 	.word	0x50000c00
 8000680:	50001400 	.word	0x50001400

08000684 <EXTI0_1_IRQHandler>:
	    SystemCoreClock = 64000000;

}

/*Interrupts*/
void EXTI0_1_IRQHandler(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0


if((GPIOB->IDR >> 0) & 1){
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	2201      	movs	r2, #1
 800068e:	4013      	ands	r3, r2
 8000690:	d057      	beq.n	8000742 <EXTI0_1_IRQHandler+0xbe>
	clear_rows_keypad();
 8000692:	f000 fcad 	bl	8000ff0 <clear_rows_keypad>
	//try for each keypad rows

	GPIOB->ODR |= (1U << 6); //open first row
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	430a      	orrs	r2, r1
 80006a0:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR >> 0) & 1){
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	2201      	movs	r2, #1
 80006a8:	4013      	ands	r3, r2
 80006aa:	d002      	beq.n	80006b2 <EXTI0_1_IRQHandler+0x2e>
		ssd_output(3);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 fb25 	bl	8000cfc <ssd_output>
	}
	GPIOB->ODR &= ~(1U << 6); //close first row
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	438a      	bics	r2, r1
 80006bc:	615a      	str	r2, [r3, #20]


	GPIOB->ODR |= (1U << 7); //open second row
 80006be:	4b26      	ldr	r3, [pc, #152]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	430a      	orrs	r2, r1
 80006c8:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR >> 0) & 1){
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	d002      	beq.n	80006da <EXTI0_1_IRQHandler+0x56>
		ssd_output(6);
 80006d4:	2006      	movs	r0, #6
 80006d6:	f000 fb11 	bl	8000cfc <ssd_output>
	}
	GPIOB->ODR &= ~(1U << 7); //close second row
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006dc:	695a      	ldr	r2, [r3, #20]
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	438a      	bics	r2, r1
 80006e4:	615a      	str	r2, [r3, #20]



	GPIOA->ODR |= (1U << 15); //open third row
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0209      	lsls	r1, r1, #8
 80006f4:	430a      	orrs	r2, r1
 80006f6:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR >> 0) & 1){
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4013      	ands	r3, r2
 8000700:	d002      	beq.n	8000708 <EXTI0_1_IRQHandler+0x84>
		ssd_output(9);
 8000702:	2009      	movs	r0, #9
 8000704:	f000 fafa 	bl	8000cfc <ssd_output>
	}
	GPIOA->ODR &= ~(1U << 15); //close third row
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	4912      	ldr	r1, [pc, #72]	; (800075c <EXTI0_1_IRQHandler+0xd8>)
 8000714:	400a      	ands	r2, r1
 8000716:	615a      	str	r2, [r3, #20]



	GPIOB->ODR |= (1U << 1); //open fourth row
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 800071e:	2102      	movs	r1, #2
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR >> 0) & 1){
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	2201      	movs	r2, #1
 800072a:	4013      	ands	r3, r2
 800072c:	d003      	beq.n	8000736 <EXTI0_1_IRQHandler+0xb2>
		ssd_output(3131);
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <EXTI0_1_IRQHandler+0xdc>)
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fae3 	bl	8000cfc <ssd_output>
	}
	GPIOB->ODR &= ~(1U << 1); //close fourth row
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 8000738:	695a      	ldr	r2, [r3, #20]
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <EXTI0_1_IRQHandler+0xd4>)
 800073c:	2102      	movs	r1, #2
 800073e:	438a      	bics	r2, r1
 8000740:	615a      	str	r2, [r3, #20]



}

	EXTI-> RPR1 |= (1 << 0); //clear pending bit
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <EXTI0_1_IRQHandler+0xe0>)
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <EXTI0_1_IRQHandler+0xe0>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
	set_rows_keypad();
 800074e:	f000 fc73 	bl	8001038 <set_rows_keypad>





}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	50000400 	.word	0x50000400
 800075c:	ffff7fff 	.word	0xffff7fff
 8000760:	00000c3b 	.word	0x00000c3b
 8000764:	40021800 	.word	0x40021800

08000768 <EXTI2_3_IRQHandler>:


void EXTI2_3_IRQHandler(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0



	if((GPIOB->IDR >> 3) & 1){
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	d05e      	beq.n	8000836 <EXTI2_3_IRQHandler+0xce>
		clear_rows_keypad();
 8000778:	f000 fc3a 	bl	8000ff0 <clear_rows_keypad>
		//try for each keypad rows

		GPIOB->ODR |= (1U << 6); //open first row
 800077c:	4b33      	ldr	r3, [pc, #204]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 8000782:	2140      	movs	r1, #64	; 0x40
 8000784:	430a      	orrs	r2, r1
 8000786:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR >> 3) & 1){
 8000788:	4b30      	ldr	r3, [pc, #192]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	d003      	beq.n	800079c <EXTI2_3_IRQHandler+0x34>
			ssd_output(1111);
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <EXTI2_3_IRQHandler+0xe8>)
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fab0 	bl	8000cfc <ssd_output>
		}
		GPIOB->ODR &= ~(1U << 6); //close first row
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 800079e:	695a      	ldr	r2, [r3, #20]
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 80007a2:	2140      	movs	r1, #64	; 0x40
 80007a4:	438a      	bics	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]


		GPIOB->ODR |= (1U << 7); //open second row
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	430a      	orrs	r2, r1
 80007b2:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR >> 3) & 1){
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	d003      	beq.n	80007c8 <EXTI2_3_IRQHandler+0x60>
			ssd_output(2222);
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <EXTI2_3_IRQHandler+0xec>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fa9a 	bl	8000cfc <ssd_output>
		}
		GPIOB->ODR &= ~(1U << 7); //close second row
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	438a      	bics	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]



		GPIOA->ODR |= (1U << 15); //open third row
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0209      	lsls	r1, r1, #8
 80007e2:	430a      	orrs	r2, r1
 80007e4:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR >> 3) & 1){
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	d003      	beq.n	80007fa <EXTI2_3_IRQHandler+0x92>
			ssd_output(5555);
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <EXTI2_3_IRQHandler+0xf0>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 fa81 	bl	8000cfc <ssd_output>
		}
		GPIOA->ODR &= ~(1U << 15); //close third row
 80007fa:	23a0      	movs	r3, #160	; 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	23a0      	movs	r3, #160	; 0xa0
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	4915      	ldr	r1, [pc, #84]	; (800085c <EXTI2_3_IRQHandler+0xf4>)
 8000806:	400a      	ands	r2, r1
 8000808:	615a      	str	r2, [r3, #20]



		GPIOB->ODR |= (1U << 1); //open fourth row
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 8000810:	2102      	movs	r1, #2
 8000812:	430a      	orrs	r2, r1
 8000814:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR >> 3) & 1){
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	2201      	movs	r2, #1
 800081e:	4013      	ands	r3, r2
 8000820:	d003      	beq.n	800082a <EXTI2_3_IRQHandler+0xc2>
			ssd_output(3162);
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <EXTI2_3_IRQHandler+0xf8>)
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fa69 	bl	8000cfc <ssd_output>
		}
		GPIOB->ODR &= ~(1U << 1); //close fourth row
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <EXTI2_3_IRQHandler+0xe4>)
 8000830:	2102      	movs	r1, #2
 8000832:	438a      	bics	r2, r1
 8000834:	615a      	str	r2, [r3, #20]



	}

		EXTI-> RPR1 |= (1 << 3); //clear pending bit
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <EXTI2_3_IRQHandler+0xfc>)
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <EXTI2_3_IRQHandler+0xfc>)
 800083c:	2108      	movs	r1, #8
 800083e:	430a      	orrs	r2, r1
 8000840:	60da      	str	r2, [r3, #12]
		set_rows_keypad();
 8000842:	f000 fbf9 	bl	8001038 <set_rows_keypad>





}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	50000400 	.word	0x50000400
 8000850:	00000457 	.word	0x00000457
 8000854:	000008ae 	.word	0x000008ae
 8000858:	000015b3 	.word	0x000015b3
 800085c:	ffff7fff 	.word	0xffff7fff
 8000860:	00000c5a 	.word	0x00000c5a
 8000864:	40021800 	.word	0x40021800

08000868 <SysTick_Handler>:


/*SYSTICK functions*/

void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    if (tDelay != 0)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <SysTick_Handler+0x1c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d004      	beq.n	800087e <SysTick_Handler+0x16>
    {
        tDelay--;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <SysTick_Handler+0x1c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	4b02      	ldr	r3, [pc, #8]	; (8000884 <SysTick_Handler+0x1c>)
 800087c:	601a      	str	r2, [r3, #0]
    }

}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000020 	.word	0x20000020

08000888 <init_systick>:

void init_systick(uint32_t s){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

    // Clear CTRL register
    SysTick->CTRL = 0x00000;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <init_systick+0x48>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
    // Main clock source is running with HSI by default which is at 8 Mhz.
    // SysTick clock source can be set with CTRL register (Bit 2)
    // 0: Processor clock/8 (AHB/8)
    // 1: Processor clock (AHB)
    SysTick->CTRL |= (1 << 2);
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <init_systick+0x48>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <init_systick+0x48>)
 800089c:	2104      	movs	r1, #4
 800089e:	430a      	orrs	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]
    // Enable callback (bit 1)
    SysTick->CTRL |= (1 << 1);
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <init_systick+0x48>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <init_systick+0x48>)
 80008a8:	2102      	movs	r1, #2
 80008aa:	430a      	orrs	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
    // Load the value
    SysTick->LOAD = (uint32_t)(s-1);
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <init_systick+0x48>)
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	3a01      	subs	r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
    // Set the current value to 0
    SysTick->VAL = 0;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <init_systick+0x48>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
    // Enable SysTick (bit 0)
    SysTick->CTRL |= (1 << 0);
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <init_systick+0x48>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <init_systick+0x48>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	430a      	orrs	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <print_digit>:

}

/*SSD functions*/
void print_digit(volatile uint32_t dig)//SSD digit print function
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

	switch (dig){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b09      	cmp	r3, #9
 80008e0:	d900      	bls.n	80008e4 <print_digit+0x10>
 80008e2:	e204      	b.n	8000cee <print_digit+0x41a>
 80008e4:	009a      	lsls	r2, r3, #2
 80008e6:	4be4      	ldr	r3, [pc, #912]	; (8000c78 <print_digit+0x3a4>)
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	469f      	mov	pc, r3

	case 0:
		GPIOB->ODR |= (1U << 2);	//set  d7
 80008ee:	4be3      	ldr	r3, [pc, #908]	; (8000c7c <print_digit+0x3a8>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4be2      	ldr	r3, [pc, #904]	; (8000c7c <print_digit+0x3a8>)
 80008f4:	2104      	movs	r1, #4
 80008f6:	430a      	orrs	r2, r1
 80008f8:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 8);	//set  d8
 80008fa:	4be0      	ldr	r3, [pc, #896]	; (8000c7c <print_digit+0x3a8>)
 80008fc:	695a      	ldr	r2, [r3, #20]
 80008fe:	4bdf      	ldr	r3, [pc, #892]	; (8000c7c <print_digit+0x3a8>)
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0049      	lsls	r1, r1, #1
 8000904:	430a      	orrs	r2, r1
 8000906:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000908:	4bdc      	ldr	r3, [pc, #880]	; (8000c7c <print_digit+0x3a8>)
 800090a:	695a      	ldr	r2, [r3, #20]
 800090c:	4bdb      	ldr	r3, [pc, #876]	; (8000c7c <print_digit+0x3a8>)
 800090e:	2120      	movs	r1, #32
 8000910:	430a      	orrs	r2, r1
 8000912:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	695a      	ldr	r2, [r3, #20]
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2102      	movs	r1, #2
 8000920:	430a      	orrs	r2, r1
 8000922:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000924:	23a0      	movs	r3, #160	; 0xa0
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	0109      	lsls	r1, r1, #4
 8000932:	430a      	orrs	r2, r1
 8000934:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000936:	23a0      	movs	r3, #160	; 0xa0
 8000938:	05db      	lsls	r3, r3, #23
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	23a0      	movs	r3, #160	; 0xa0
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	430a      	orrs	r2, r1
 8000944:	615a      	str	r2, [r3, #20]

		GPIOB->ODR &= ~(1U << 4);	//set  d12
 8000946:	4bcd      	ldr	r3, [pc, #820]	; (8000c7c <print_digit+0x3a8>)
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	4bcc      	ldr	r3, [pc, #816]	; (8000c7c <print_digit+0x3a8>)
 800094c:	2110      	movs	r1, #16
 800094e:	438a      	bics	r2, r1
 8000950:	615a      	str	r2, [r3, #20]

		break;
 8000952:	e1cc      	b.n	8000cee <print_digit+0x41a>
	case 1:
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000954:	4bc9      	ldr	r3, [pc, #804]	; (8000c7c <print_digit+0x3a8>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	4bc8      	ldr	r3, [pc, #800]	; (8000c7c <print_digit+0x3a8>)
 800095a:	2120      	movs	r1, #32
 800095c:	430a      	orrs	r2, r1
 800095e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	695a      	ldr	r2, [r3, #20]
 8000966:	23a0      	movs	r3, #160	; 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2102      	movs	r1, #2
 800096c:	430a      	orrs	r2, r1
 800096e:	615a      	str	r2, [r3, #20]

		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000970:	4bc2      	ldr	r3, [pc, #776]	; (8000c7c <print_digit+0x3a8>)
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	4bc1      	ldr	r3, [pc, #772]	; (8000c7c <print_digit+0x3a8>)
 8000976:	2104      	movs	r1, #4
 8000978:	438a      	bics	r2, r1
 800097a:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 8);	//set  d8
 800097c:	4bbf      	ldr	r3, [pc, #764]	; (8000c7c <print_digit+0x3a8>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	4bbe      	ldr	r3, [pc, #760]	; (8000c7c <print_digit+0x3a8>)
 8000982:	49bf      	ldr	r1, [pc, #764]	; (8000c80 <print_digit+0x3ac>)
 8000984:	400a      	ands	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 11);	//set  a5
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	23a0      	movs	r3, #160	; 0xa0
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	49bc      	ldr	r1, [pc, #752]	; (8000c84 <print_digit+0x3b0>)
 8000994:	400a      	ands	r2, r1
 8000996:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 6);	//set  a6
 8000998:	23a0      	movs	r3, #160	; 0xa0
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	438a      	bics	r2, r1
 80009a6:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 4);	//set  d12
 80009a8:	4bb4      	ldr	r3, [pc, #720]	; (8000c7c <print_digit+0x3a8>)
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	4bb3      	ldr	r3, [pc, #716]	; (8000c7c <print_digit+0x3a8>)
 80009ae:	2110      	movs	r1, #16
 80009b0:	438a      	bics	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]



		break;
 80009b4:	e19b      	b.n	8000cee <print_digit+0x41a>
	case 2:
		GPIOB->ODR |= (1U << 2);	//set  d7
 80009b6:	4bb1      	ldr	r3, [pc, #708]	; (8000c7c <print_digit+0x3a8>)
 80009b8:	695a      	ldr	r2, [r3, #20]
 80009ba:	4bb0      	ldr	r3, [pc, #704]	; (8000c7c <print_digit+0x3a8>)
 80009bc:	2104      	movs	r1, #4
 80009be:	430a      	orrs	r2, r1
 80009c0:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 8);	//set  d8
 80009c2:	4bae      	ldr	r3, [pc, #696]	; (8000c7c <print_digit+0x3a8>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4bad      	ldr	r3, [pc, #692]	; (8000c7c <print_digit+0x3a8>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0049      	lsls	r1, r1, #1
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 80009d0:	4baa      	ldr	r3, [pc, #680]	; (8000c7c <print_digit+0x3a8>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	4ba9      	ldr	r3, [pc, #676]	; (8000c7c <print_digit+0x3a8>)
 80009d6:	2110      	movs	r1, #16
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	2102      	movs	r1, #2
 80009e8:	430a      	orrs	r2, r1
 80009ea:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	695a      	ldr	r2, [r3, #20]
 80009f2:	23a0      	movs	r3, #160	; 0xa0
 80009f4:	05db      	lsls	r3, r3, #23
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	430a      	orrs	r2, r1
 80009fa:	615a      	str	r2, [r3, #20]



		GPIOB->ODR &= ~(1U << 5);	//set  d11
 80009fc:	4b9f      	ldr	r3, [pc, #636]	; (8000c7c <print_digit+0x3a8>)
 80009fe:	695a      	ldr	r2, [r3, #20]
 8000a00:	4b9e      	ldr	r3, [pc, #632]	; (8000c7c <print_digit+0x3a8>)
 8000a02:	2120      	movs	r1, #32
 8000a04:	438a      	bics	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 11);	//set  a5
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	499c      	ldr	r1, [pc, #624]	; (8000c84 <print_digit+0x3b0>)
 8000a14:	400a      	ands	r2, r1
 8000a16:	615a      	str	r2, [r3, #20]

		break;
 8000a18:	e169      	b.n	8000cee <print_digit+0x41a>
	case 3:
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000a1a:	4b98      	ldr	r3, [pc, #608]	; (8000c7c <print_digit+0x3a8>)
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	4b97      	ldr	r3, [pc, #604]	; (8000c7c <print_digit+0x3a8>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0049      	lsls	r1, r1, #1
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000a28:	4b94      	ldr	r3, [pc, #592]	; (8000c7c <print_digit+0x3a8>)
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	4b93      	ldr	r3, [pc, #588]	; (8000c7c <print_digit+0x3a8>)
 8000a2e:	2120      	movs	r1, #32
 8000a30:	430a      	orrs	r2, r1
 8000a32:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000a34:	4b91      	ldr	r3, [pc, #580]	; (8000c7c <print_digit+0x3a8>)
 8000a36:	695a      	ldr	r2, [r3, #20]
 8000a38:	4b90      	ldr	r3, [pc, #576]	; (8000c7c <print_digit+0x3a8>)
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000a40:	23a0      	movs	r3, #160	; 0xa0
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]




		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000a60:	4b86      	ldr	r3, [pc, #536]	; (8000c7c <print_digit+0x3a8>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	4b85      	ldr	r3, [pc, #532]	; (8000c7c <print_digit+0x3a8>)
 8000a66:	2104      	movs	r1, #4
 8000a68:	438a      	bics	r2, r1
 8000a6a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 11);	//set  a5
 8000a6c:	23a0      	movs	r3, #160	; 0xa0
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	695a      	ldr	r2, [r3, #20]
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	4983      	ldr	r1, [pc, #524]	; (8000c84 <print_digit+0x3b0>)
 8000a78:	400a      	ands	r2, r1
 8000a7a:	615a      	str	r2, [r3, #20]

		break;
 8000a7c:	e137      	b.n	8000cee <print_digit+0x41a>
	case 4:
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000a7e:	4b7f      	ldr	r3, [pc, #508]	; (8000c7c <print_digit+0x3a8>)
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	4b7e      	ldr	r3, [pc, #504]	; (8000c7c <print_digit+0x3a8>)
 8000a84:	2120      	movs	r1, #32
 8000a86:	430a      	orrs	r2, r1
 8000a88:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000a8a:	4b7c      	ldr	r3, [pc, #496]	; (8000c7c <print_digit+0x3a8>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <print_digit+0x3a8>)
 8000a90:	2110      	movs	r1, #16
 8000a92:	430a      	orrs	r2, r1
 8000a94:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000aa6:	23a0      	movs	r3, #160	; 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	695a      	ldr	r2, [r3, #20]
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0109      	lsls	r1, r1, #4
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	615a      	str	r2, [r3, #20]




		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000ab8:	4b70      	ldr	r3, [pc, #448]	; (8000c7c <print_digit+0x3a8>)
 8000aba:	695a      	ldr	r2, [r3, #20]
 8000abc:	4b6f      	ldr	r3, [pc, #444]	; (8000c7c <print_digit+0x3a8>)
 8000abe:	2104      	movs	r1, #4
 8000ac0:	438a      	bics	r2, r1
 8000ac2:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 8);	//set  d8
 8000ac4:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <print_digit+0x3a8>)
 8000ac6:	695a      	ldr	r2, [r3, #20]
 8000ac8:	4b6c      	ldr	r3, [pc, #432]	; (8000c7c <print_digit+0x3a8>)
 8000aca:	496d      	ldr	r1, [pc, #436]	; (8000c80 <print_digit+0x3ac>)
 8000acc:	400a      	ands	r2, r1
 8000ace:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 6);	//set  a6
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	23a0      	movs	r3, #160	; 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	438a      	bics	r2, r1
 8000ade:	615a      	str	r2, [r3, #20]

		break;
 8000ae0:	e105      	b.n	8000cee <print_digit+0x41a>
	case 5:
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000ae2:	4b66      	ldr	r3, [pc, #408]	; (8000c7c <print_digit+0x3a8>)
 8000ae4:	695a      	ldr	r2, [r3, #20]
 8000ae6:	4b65      	ldr	r3, [pc, #404]	; (8000c7c <print_digit+0x3a8>)
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	0049      	lsls	r1, r1, #1
 8000aec:	430a      	orrs	r2, r1
 8000aee:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000af0:	4b62      	ldr	r3, [pc, #392]	; (8000c7c <print_digit+0x3a8>)
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <print_digit+0x3a8>)
 8000af6:	2120      	movs	r1, #32
 8000af8:	430a      	orrs	r2, r1
 8000afa:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000afc:	4b5f      	ldr	r3, [pc, #380]	; (8000c7c <print_digit+0x3a8>)
 8000afe:	695a      	ldr	r2, [r3, #20]
 8000b00:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <print_digit+0x3a8>)
 8000b02:	2110      	movs	r1, #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000b08:	23a0      	movs	r3, #160	; 0xa0
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	2180      	movs	r1, #128	; 0x80
 8000b14:	0109      	lsls	r1, r1, #4
 8000b16:	430a      	orrs	r2, r1
 8000b18:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000b1a:	23a0      	movs	r3, #160	; 0xa0
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	695a      	ldr	r2, [r3, #20]
 8000b20:	23a0      	movs	r3, #160	; 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	430a      	orrs	r2, r1
 8000b28:	615a      	str	r2, [r3, #20]




		GPIOA->ODR &= ~(1U << 1);	//set  a1
 8000b2a:	23a0      	movs	r3, #160	; 0xa0
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	695a      	ldr	r2, [r3, #20]
 8000b30:	23a0      	movs	r3, #160	; 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	2102      	movs	r1, #2
 8000b36:	438a      	bics	r2, r1
 8000b38:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000b3a:	4b50      	ldr	r3, [pc, #320]	; (8000c7c <print_digit+0x3a8>)
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	4b4f      	ldr	r3, [pc, #316]	; (8000c7c <print_digit+0x3a8>)
 8000b40:	2104      	movs	r1, #4
 8000b42:	438a      	bics	r2, r1
 8000b44:	615a      	str	r2, [r3, #20]

		break;
 8000b46:	e0d2      	b.n	8000cee <print_digit+0x41a>
	case 6:
		GPIOB->ODR |= (1U << 2);	//set  d7
 8000b48:	4b4c      	ldr	r3, [pc, #304]	; (8000c7c <print_digit+0x3a8>)
 8000b4a:	695a      	ldr	r2, [r3, #20]
 8000b4c:	4b4b      	ldr	r3, [pc, #300]	; (8000c7c <print_digit+0x3a8>)
 8000b4e:	2104      	movs	r1, #4
 8000b50:	430a      	orrs	r2, r1
 8000b52:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000b54:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <print_digit+0x3a8>)
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <print_digit+0x3a8>)
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	0049      	lsls	r1, r1, #1
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000b62:	4b46      	ldr	r3, [pc, #280]	; (8000c7c <print_digit+0x3a8>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <print_digit+0x3a8>)
 8000b68:	2120      	movs	r1, #32
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000b6e:	4b43      	ldr	r3, [pc, #268]	; (8000c7c <print_digit+0x3a8>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b42      	ldr	r3, [pc, #264]	; (8000c7c <print_digit+0x3a8>)
 8000b74:	2110      	movs	r1, #16
 8000b76:	430a      	orrs	r2, r1
 8000b78:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000b7a:	23a0      	movs	r3, #160	; 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	23a0      	movs	r3, #160	; 0xa0
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0109      	lsls	r1, r1, #4
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000b8c:	23a0      	movs	r3, #160	; 0xa0
 8000b8e:	05db      	lsls	r3, r3, #23
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	615a      	str	r2, [r3, #20]




		GPIOA->ODR &= ~(1U << 1);	//set  a1
 8000b9c:	23a0      	movs	r3, #160	; 0xa0
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	23a0      	movs	r3, #160	; 0xa0
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	438a      	bics	r2, r1
 8000baa:	615a      	str	r2, [r3, #20]


		break;
 8000bac:	e09f      	b.n	8000cee <print_digit+0x41a>
	case 7:
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000bae:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <print_digit+0x3a8>)
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <print_digit+0x3a8>)
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000bba:	23a0      	movs	r3, #160	; 0xa0
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	695a      	ldr	r2, [r3, #20]
 8000bc0:	23a0      	movs	r3, #160	; 0xa0
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000bca:	23a0      	movs	r3, #160	; 0xa0
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	695a      	ldr	r2, [r3, #20]
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0109      	lsls	r1, r1, #4
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000bdc:	23a0      	movs	r3, #160	; 0xa0
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	695a      	ldr	r2, [r3, #20]
 8000be2:	23a0      	movs	r3, #160	; 0xa0
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	430a      	orrs	r2, r1
 8000bea:	615a      	str	r2, [r3, #20]





		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <print_digit+0x3a8>)
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <print_digit+0x3a8>)
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 8);	//set  d8
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <print_digit+0x3a8>)
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <print_digit+0x3a8>)
 8000bfe:	4920      	ldr	r1, [pc, #128]	; (8000c80 <print_digit+0x3ac>)
 8000c00:	400a      	ands	r2, r1
 8000c02:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 4);	//set  d12
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <print_digit+0x3a8>)
 8000c06:	695a      	ldr	r2, [r3, #20]
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <print_digit+0x3a8>)
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	438a      	bics	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]

		break;
 8000c10:	e06d      	b.n	8000cee <print_digit+0x41a>
	case 8:
		GPIOB->ODR |= (1U << 2);	//set  d7
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <print_digit+0x3a8>)
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <print_digit+0x3a8>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <print_digit+0x3a8>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <print_digit+0x3a8>)
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <print_digit+0x3a8>)
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <print_digit+0x3a8>)
 8000c32:	2120      	movs	r1, #32
 8000c34:	430a      	orrs	r2, r1
 8000c36:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000c38:	23a0      	movs	r3, #160	; 0xa0
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	23a0      	movs	r3, #160	; 0xa0
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	2102      	movs	r1, #2
 8000c44:	430a      	orrs	r2, r1
 8000c46:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000c48:	23a0      	movs	r3, #160	; 0xa0
 8000c4a:	05db      	lsls	r3, r3, #23
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	23a0      	movs	r3, #160	; 0xa0
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	0109      	lsls	r1, r1, #4
 8000c56:	430a      	orrs	r2, r1
 8000c58:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000c5a:	23a0      	movs	r3, #160	; 0xa0
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	695a      	ldr	r2, [r3, #20]
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	430a      	orrs	r2, r1
 8000c68:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <print_digit+0x3a8>)
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <print_digit+0x3a8>)
 8000c70:	2110      	movs	r1, #16
 8000c72:	430a      	orrs	r2, r1
 8000c74:	615a      	str	r2, [r3, #20]


		break;
 8000c76:	e03a      	b.n	8000cee <print_digit+0x41a>
 8000c78:	0800127c 	.word	0x0800127c
 8000c7c:	50000400 	.word	0x50000400
 8000c80:	fffffeff 	.word	0xfffffeff
 8000c84:	fffff7ff 	.word	0xfffff7ff
	case 9:
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <print_digit+0x424>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <print_digit+0x424>)
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	0049      	lsls	r1, r1, #1
 8000c92:	430a      	orrs	r2, r1
 8000c94:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <print_digit+0x424>)
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <print_digit+0x424>)
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000ca2:	23a0      	movs	r3, #160	; 0xa0
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	2102      	movs	r1, #2
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000cb2:	23a0      	movs	r3, #160	; 0xa0
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	695a      	ldr	r2, [r3, #20]
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	0109      	lsls	r1, r1, #4
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000cc4:	23a0      	movs	r3, #160	; 0xa0
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	695a      	ldr	r2, [r3, #20]
 8000cca:	23a0      	movs	r3, #160	; 0xa0
 8000ccc:	05db      	lsls	r3, r3, #23
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <print_digit+0x424>)
 8000cd6:	695a      	ldr	r2, [r3, #20]
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <print_digit+0x424>)
 8000cda:	2110      	movs	r1, #16
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	615a      	str	r2, [r3, #20]




		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <print_digit+0x424>)
 8000ce2:	695a      	ldr	r2, [r3, #20]
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <print_digit+0x424>)
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	438a      	bics	r2, r1
 8000cea:	615a      	str	r2, [r3, #20]


		break;
 8000cec:	46c0      	nop			; (mov r8, r8)

	}

}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	50000400 	.word	0x50000400

08000cfc <ssd_output>:



void ssd_output(uint32_t x)//special function to print 4 digit numbers
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

		uint32_t ddelay = 100;
 8000d04:	2364      	movs	r3, #100	; 0x64
 8000d06:	61fb      	str	r3, [r7, #28]
		uint32_t dig2;
		uint32_t dig3;
		uint32_t dig4;


		dig4 = x % 10U;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	210a      	movs	r1, #10
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fa7f 	bl	8000210 <__aeabi_uidivmod>
 8000d12:	000b      	movs	r3, r1
 8000d14:	61bb      	str	r3, [r7, #24]
		x = x /10U;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	210a      	movs	r1, #10
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff f9f2 	bl	8000104 <__udivsi3>
 8000d20:	0003      	movs	r3, r0
 8000d22:	607b      	str	r3, [r7, #4]
		dig3 = x % 10U;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	210a      	movs	r1, #10
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff fa71 	bl	8000210 <__aeabi_uidivmod>
 8000d2e:	000b      	movs	r3, r1
 8000d30:	617b      	str	r3, [r7, #20]
		x = x /10U;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	210a      	movs	r1, #10
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff f9e4 	bl	8000104 <__udivsi3>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	607b      	str	r3, [r7, #4]
		dig2 = x % 10U;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	210a      	movs	r1, #10
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fa63 	bl	8000210 <__aeabi_uidivmod>
 8000d4a:	000b      	movs	r3, r1
 8000d4c:	613b      	str	r3, [r7, #16]
		x = x /10U;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	210a      	movs	r1, #10
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff f9d6 	bl	8000104 <__udivsi3>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	607b      	str	r3, [r7, #4]
		dig1 = x % 10U;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	210a      	movs	r1, #10
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff fa55 	bl	8000210 <__aeabi_uidivmod>
 8000d66:	000b      	movs	r3, r1
 8000d68:	60fb      	str	r3, [r7, #12]

	//uint8_t flag = 0;
	while(ddelay > 0){
 8000d6a:	e064      	b.n	8000e36 <ssd_output+0x13a>

		print_digit(dig1);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fdb0 	bl	80008d4 <print_digit>
		GPIOA->ODR &= ~(1U << 12);	//set  a4 to 0
 8000d74:	23a0      	movs	r3, #160	; 0xa0
 8000d76:	05db      	lsls	r3, r3, #23
 8000d78:	695a      	ldr	r2, [r3, #20]
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	4932      	ldr	r1, [pc, #200]	; (8000e48 <ssd_output+0x14c>)
 8000d80:	400a      	ands	r2, r1
 8000d82:	615a      	str	r2, [r3, #20]
		delay(1600);
 8000d84:	23c8      	movs	r3, #200	; 0xc8
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff facf 	bl	800032c <delay>
		GPIOA->ODR |= (1U << 12);	//set  a4 to 1
 8000d8e:	23a0      	movs	r3, #160	; 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	695a      	ldr	r2, [r3, #20]
 8000d94:	23a0      	movs	r3, #160	; 0xa0
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0149      	lsls	r1, r1, #5
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	615a      	str	r2, [r3, #20]
		//reset();

		print_digit(dig2);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fd96 	bl	80008d4 <print_digit>
		GPIOA->ODR &= ~(1U << 5);	//set  a3 to 0
 8000da8:	23a0      	movs	r3, #160	; 0xa0
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	23a0      	movs	r3, #160	; 0xa0
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	2120      	movs	r1, #32
 8000db4:	438a      	bics	r2, r1
 8000db6:	615a      	str	r2, [r3, #20]
		delay(1600);
 8000db8:	23c8      	movs	r3, #200	; 0xc8
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fab5 	bl	800032c <delay>
		GPIOA->ODR |= (1U << 5);	//set  a3 to 1
 8000dc2:	23a0      	movs	r3, #160	; 0xa0
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	695a      	ldr	r2, [r3, #20]
 8000dc8:	23a0      	movs	r3, #160	; 0xa0
 8000dca:	05db      	lsls	r3, r3, #23
 8000dcc:	2120      	movs	r1, #32
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	615a      	str	r2, [r3, #20]
		//reset();

		print_digit(dig3);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fd7d 	bl	80008d4 <print_digit>
		GPIOA->ODR &= ~(1U << 4);	//set  a2 to 0
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	695a      	ldr	r2, [r3, #20]
 8000de0:	23a0      	movs	r3, #160	; 0xa0
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	2110      	movs	r1, #16
 8000de6:	438a      	bics	r2, r1
 8000de8:	615a      	str	r2, [r3, #20]
		delay(1600);
 8000dea:	23c8      	movs	r3, #200	; 0xc8
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff fa9c 	bl	800032c <delay>
		GPIOA->ODR |= (1U << 4);	//set  a2 to 1
 8000df4:	23a0      	movs	r3, #160	; 0xa0
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	2110      	movs	r1, #16
 8000e00:	430a      	orrs	r2, r1
 8000e02:	615a      	str	r2, [r3, #20]
	//	reset();

		print_digit(dig4);
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fd64 	bl	80008d4 <print_digit>
		GPIOB->ODR &= ~(1U << 9);	//set  d10 to 0
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <ssd_output+0x150>)
 8000e0e:	695a      	ldr	r2, [r3, #20]
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <ssd_output+0x150>)
 8000e12:	490f      	ldr	r1, [pc, #60]	; (8000e50 <ssd_output+0x154>)
 8000e14:	400a      	ands	r2, r1
 8000e16:	615a      	str	r2, [r3, #20]
		delay(1600);
 8000e18:	23c8      	movs	r3, #200	; 0xc8
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fa85 	bl	800032c <delay>
		GPIOB->ODR |= (1U << 9);	//set  d10 to 1
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <ssd_output+0x150>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <ssd_output+0x150>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0089      	lsls	r1, r1, #2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	615a      	str	r2, [r3, #20]
		//reset();


	ddelay = ddelay - 1;
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	61fb      	str	r3, [r7, #28]
	while(ddelay > 0){
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d197      	bne.n	8000d6c <ssd_output+0x70>

		//i = i-1;
	}


}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b008      	add	sp, #32
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	ffffefff 	.word	0xffffefff
 8000e4c:	50000400 	.word	0x50000400
 8000e50:	fffffdff 	.word	0xfffffdff

08000e54 <config_keypad_pins>:



/*keypad functions*/

void config_keypad_pins(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	//assumed that clocks are already opened

	//rows
		setMode('B',6,'O');  //D1 -> row1
 8000e58:	224f      	movs	r2, #79	; 0x4f
 8000e5a:	2106      	movs	r1, #6
 8000e5c:	2042      	movs	r0, #66	; 0x42
 8000e5e:	f7ff fab1 	bl	80003c4 <setMode>
		setMode('B',7,'O');  //D0 -> row2
 8000e62:	224f      	movs	r2, #79	; 0x4f
 8000e64:	2107      	movs	r1, #7
 8000e66:	2042      	movs	r0, #66	; 0x42
 8000e68:	f7ff faac 	bl	80003c4 <setMode>
		setMode('A',15,'O'); //D2 -> row3
 8000e6c:	224f      	movs	r2, #79	; 0x4f
 8000e6e:	210f      	movs	r1, #15
 8000e70:	2041      	movs	r0, #65	; 0x41
 8000e72:	f7ff faa7 	bl	80003c4 <setMode>
		setMode('B',1,'O');  //D3 -> row4
 8000e76:	224f      	movs	r2, #79	; 0x4f
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2042      	movs	r0, #66	; 0x42
 8000e7c:	f7ff faa2 	bl	80003c4 <setMode>

		//columns
		setMode('A',10,'I'); //D4 -> column1
 8000e80:	2249      	movs	r2, #73	; 0x49
 8000e82:	210a      	movs	r1, #10
 8000e84:	2041      	movs	r0, #65	; 0x41
 8000e86:	f7ff fa9d 	bl	80003c4 <setMode>
		setMode('A',9,'I'); //D5 -> column2
 8000e8a:	2249      	movs	r2, #73	; 0x49
 8000e8c:	2109      	movs	r1, #9
 8000e8e:	2041      	movs	r0, #65	; 0x41
 8000e90:	f7ff fa98 	bl	80003c4 <setMode>
		setMode('B',0,'I'); //D6 -> column3
 8000e94:	2249      	movs	r2, #73	; 0x49
 8000e96:	2100      	movs	r1, #0
 8000e98:	2042      	movs	r0, #66	; 0x42
 8000e9a:	f7ff fa93 	bl	80003c4 <setMode>
		setMode('B',3,'I'); //D13 -> column4
 8000e9e:	2249      	movs	r2, #73	; 0x49
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	2042      	movs	r0, #66	; 0x42
 8000ea4:	f7ff fa8e 	bl	80003c4 <setMode>

		//set input pins pulldown mode for stability
		GPIOA->PUPDR |= (2U << 2*10);
 8000ea8:	23a0      	movs	r3, #160	; 0xa0
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	23a0      	movs	r3, #160	; 0xa0
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	0389      	lsls	r1, r1, #14
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	60da      	str	r2, [r3, #12]
		GPIOA->PUPDR |= (2U << 2*9);
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	23a0      	movs	r3, #160	; 0xa0
 8000ec2:	05db      	lsls	r3, r3, #23
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0309      	lsls	r1, r1, #12
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	60da      	str	r2, [r3, #12]
		GPIOB->PUPDR |= (2U << 2*0);
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <config_keypad_pins+0xcc>)
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <config_keypad_pins+0xcc>)
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	60da      	str	r2, [r3, #12]
		GPIOB->PUPDR |= (2U << 2*3);
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <config_keypad_pins+0xcc>)
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <config_keypad_pins+0xcc>)
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	60da      	str	r2, [r3, #12]

		//set all rows high as initially
		GPIOB->ODR |= (1U << 6);
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <config_keypad_pins+0xcc>)
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <config_keypad_pins+0xcc>)
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	430a      	orrs	r2, r1
 8000eee:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 7);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <config_keypad_pins+0xcc>)
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <config_keypad_pins+0xcc>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 15);
 8000efc:	23a0      	movs	r3, #160	; 0xa0
 8000efe:	05db      	lsls	r3, r3, #23
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	23a0      	movs	r3, #160	; 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	0209      	lsls	r1, r1, #8
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 1);
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <config_keypad_pins+0xcc>)
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <config_keypad_pins+0xcc>)
 8000f14:	2102      	movs	r1, #2
 8000f16:	430a      	orrs	r2, r1
 8000f18:	615a      	str	r2, [r3, #20]

}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	50000400 	.word	0x50000400

08000f24 <config_keypad_IRQs>:

void config_keypad_IRQs(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
//config PA10,PA9,PB0,PA7;

	//RCC-> APBENR2 |= (1U << 0); //enable SYSCFG clock

	//PA10 8-9-10-11 mux
	EXTI->EXTICR[2] |= (0U << 8*2);
 8000f28:	4a30      	ldr	r2, [pc, #192]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f2a:	4b30      	ldr	r3, [pc, #192]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f2c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000f2e:	669a      	str	r2, [r3, #104]	; 0x68
	EXTI->RTSR1 |= (1U << 10);
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	00c9      	lsls	r1, r1, #3
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
	EXTI->IMR1 |= (1U << 10);
 8000f3e:	4a2b      	ldr	r2, [pc, #172]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	58d3      	ldr	r3, [r2, r3]
 8000f44:	4929      	ldr	r1, [pc, #164]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	508b      	str	r3, [r1, r2]



	//PA9  8-9-10-11 mux
	EXTI->EXTICR[2] |= (0U << 8*1);
 8000f50:	4a26      	ldr	r2, [pc, #152]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f54:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000f56:	669a      	str	r2, [r3, #104]	; 0x68
	EXTI->RTSR1 |= (1U << 9);
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0089      	lsls	r1, r1, #2
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
	EXTI->IMR1 |= (1U << 9);
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	58d3      	ldr	r3, [r2, r3]
 8000f6c:	491f      	ldr	r1, [pc, #124]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4313      	orrs	r3, r2
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	508b      	str	r3, [r1, r2]


	//PB0  0-1-2-3 mux
	EXTI->EXTICR[0] |= (1U << 8*0);
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	661a      	str	r2, [r3, #96]	; 0x60
	EXTI->RTSR1 |= (1U << 0);
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
	EXTI->IMR1 |= (1U << 0);
 8000f90:	4a16      	ldr	r2, [pc, #88]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	58d3      	ldr	r3, [r2, r3]
 8000f96:	4915      	ldr	r1, [pc, #84]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	508b      	str	r3, [r1, r2]


	//PB3 0-1-2-3 mux
	EXTI->EXTICR[0] |= (1U << 8*3);
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000fa2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	0449      	lsls	r1, r1, #17
 8000faa:	430a      	orrs	r2, r1
 8000fac:	661a      	str	r2, [r3, #96]	; 0x60
	EXTI->RTSR1 |= (1U << 3);
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
	EXTI->IMR1 |= (1U << 3);
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	58d3      	ldr	r3, [r2, r3]
 8000fc0:	490a      	ldr	r1, [pc, #40]	; (8000fec <config_keypad_IRQs+0xc8>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	508b      	str	r3, [r1, r2]


    NVIC_SetPriority(EXTI0_1_IRQn,1);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2005      	movs	r0, #5
 8000fce:	f7ff f93f 	bl	8000250 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000fd2:	2005      	movs	r0, #5
 8000fd4:	f7ff f922 	bl	800021c <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI2_3_IRQn,1);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f7ff f938 	bl	8000250 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f7ff f91b 	bl	800021c <__NVIC_EnableIRQ>

    /*
    NVIC_SetPriority(EXTI4_15_IRQn,2);
    NVIC_EnableIRQ(EXTI4_15_IRQn);
*/
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021800 	.word	0x40021800

08000ff0 <clear_rows_keypad>:


void clear_rows_keypad(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	//set all rows low
	GPIOB->ODR &= ~(1U << 6);
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <clear_rows_keypad+0x40>)
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <clear_rows_keypad+0x40>)
 8000ffa:	2140      	movs	r1, #64	; 0x40
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~(1U << 7);
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <clear_rows_keypad+0x40>)
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <clear_rows_keypad+0x40>)
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	438a      	bics	r2, r1
 800100a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U << 15);
 800100c:	23a0      	movs	r3, #160	; 0xa0
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	23a0      	movs	r3, #160	; 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	4907      	ldr	r1, [pc, #28]	; (8001034 <clear_rows_keypad+0x44>)
 8001018:	400a      	ands	r2, r1
 800101a:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~(1U << 1);
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <clear_rows_keypad+0x40>)
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <clear_rows_keypad+0x40>)
 8001022:	2102      	movs	r1, #2
 8001024:	438a      	bics	r2, r1
 8001026:	615a      	str	r2, [r3, #20]
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	50000400 	.word	0x50000400
 8001034:	ffff7fff 	.word	0xffff7fff

08001038 <set_rows_keypad>:


void set_rows_keypad(){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	//set all rows high as initially
	GPIOB->ODR |= (1U << 6);
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <set_rows_keypad+0x40>)
 800103e:	695a      	ldr	r2, [r3, #20]
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <set_rows_keypad+0x40>)
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	430a      	orrs	r2, r1
 8001046:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |= (1U << 7);
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <set_rows_keypad+0x40>)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <set_rows_keypad+0x40>)
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	430a      	orrs	r2, r1
 8001052:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1U << 15);
 8001054:	23a0      	movs	r3, #160	; 0xa0
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	0209      	lsls	r1, r1, #8
 8001062:	430a      	orrs	r2, r1
 8001064:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |= (1U << 1);
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <set_rows_keypad+0x40>)
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <set_rows_keypad+0x40>)
 800106c:	2102      	movs	r1, #2
 800106e:	430a      	orrs	r2, r1
 8001070:	615a      	str	r2, [r3, #20]
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	50000400 	.word	0x50000400

0800107c <main>:


volatile uint32_t num = 2359;


int main(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0


	init_systick(SystemCoreClock/1000);
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <main+0xf4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	22fa      	movs	r2, #250	; 0xfa
 8001086:	0091      	lsls	r1, r2, #2
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff f83b 	bl	8000104 <__udivsi3>
 800108e:	0003      	movs	r3, r0
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff fbf9 	bl	8000888 <init_systick>

/*open clocks*/
	openClock('A');
 8001096:	2041      	movs	r0, #65	; 0x41
 8001098:	f7ff f958 	bl	800034c <openClock>
	openClock('B');
 800109c:	2042      	movs	r0, #66	; 0x42
 800109e:	f7ff f955 	bl	800034c <openClock>

	/*configure 7 segment pins*/
	setMode('A',1,'O');
 80010a2:	224f      	movs	r2, #79	; 0x4f
 80010a4:	2101      	movs	r1, #1
 80010a6:	2041      	movs	r0, #65	; 0x41
 80010a8:	f7ff f98c 	bl	80003c4 <setMode>
	setMode('A',4,'O');
 80010ac:	224f      	movs	r2, #79	; 0x4f
 80010ae:	2104      	movs	r1, #4
 80010b0:	2041      	movs	r0, #65	; 0x41
 80010b2:	f7ff f987 	bl	80003c4 <setMode>
	setMode('A',5,'O');
 80010b6:	224f      	movs	r2, #79	; 0x4f
 80010b8:	2105      	movs	r1, #5
 80010ba:	2041      	movs	r0, #65	; 0x41
 80010bc:	f7ff f982 	bl	80003c4 <setMode>
	setMode('A',12,'O');
 80010c0:	224f      	movs	r2, #79	; 0x4f
 80010c2:	210c      	movs	r1, #12
 80010c4:	2041      	movs	r0, #65	; 0x41
 80010c6:	f7ff f97d 	bl	80003c4 <setMode>
	setMode('A',11,'O');
 80010ca:	224f      	movs	r2, #79	; 0x4f
 80010cc:	210b      	movs	r1, #11
 80010ce:	2041      	movs	r0, #65	; 0x41
 80010d0:	f7ff f978 	bl	80003c4 <setMode>
	setMode('A',6,'O');
 80010d4:	224f      	movs	r2, #79	; 0x4f
 80010d6:	2106      	movs	r1, #6
 80010d8:	2041      	movs	r0, #65	; 0x41
 80010da:	f7ff f973 	bl	80003c4 <setMode>
	setMode('B',8,'O');
 80010de:	224f      	movs	r2, #79	; 0x4f
 80010e0:	2108      	movs	r1, #8
 80010e2:	2042      	movs	r0, #66	; 0x42
 80010e4:	f7ff f96e 	bl	80003c4 <setMode>
	setMode('A',8,'O');
 80010e8:	224f      	movs	r2, #79	; 0x4f
 80010ea:	2108      	movs	r1, #8
 80010ec:	2041      	movs	r0, #65	; 0x41
 80010ee:	f7ff f969 	bl	80003c4 <setMode>
	setMode('B',9,'O');
 80010f2:	224f      	movs	r2, #79	; 0x4f
 80010f4:	2109      	movs	r1, #9
 80010f6:	2042      	movs	r0, #66	; 0x42
 80010f8:	f7ff f964 	bl	80003c4 <setMode>
	setMode('B',5,'O');
 80010fc:	224f      	movs	r2, #79	; 0x4f
 80010fe:	2105      	movs	r1, #5
 8001100:	2042      	movs	r0, #66	; 0x42
 8001102:	f7ff f95f 	bl	80003c4 <setMode>
	setMode('B',4,'O');
 8001106:	224f      	movs	r2, #79	; 0x4f
 8001108:	2104      	movs	r1, #4
 800110a:	2042      	movs	r0, #66	; 0x42
 800110c:	f7ff f95a 	bl	80003c4 <setMode>
	setMode('B',2,'O');
 8001110:	224f      	movs	r2, #79	; 0x4f
 8001112:	2102      	movs	r1, #2
 8001114:	2042      	movs	r0, #66	; 0x42
 8001116:	f7ff f955 	bl	80003c4 <setMode>


	//set ssd digits low as initial to open all digits
	GPIOA->ODR &= ~(1U << 12);	//set  a4 to 1
 800111a:	23a0      	movs	r3, #160	; 0xa0
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	4913      	ldr	r1, [pc, #76]	; (8001174 <main+0xf8>)
 8001126:	400a      	ands	r2, r1
 8001128:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U << 5);	//set  a3 to 1
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	2120      	movs	r1, #32
 8001136:	438a      	bics	r2, r1
 8001138:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1U << 4);	//set  a2 to 1
 800113a:	23a0      	movs	r3, #160	; 0xa0
 800113c:	05db      	lsls	r3, r3, #23
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	23a0      	movs	r3, #160	; 0xa0
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	2110      	movs	r1, #16
 8001146:	438a      	bics	r2, r1
 8001148:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~(1U << 9);	//set  d10 to 1
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <main+0xfc>)
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <main+0xfc>)
 8001150:	490a      	ldr	r1, [pc, #40]	; (800117c <main+0x100>)
 8001152:	400a      	ands	r2, r1
 8001154:	615a      	str	r2, [r3, #20]



	/*configure keypad*/
	//rows are output, columns are input
	config_keypad_pins();//configure the pins
 8001156:	f7ff fe7d 	bl	8000e54 <config_keypad_pins>
	config_keypad_IRQs();//configure the interrupts
 800115a:	f7ff fee3 	bl	8000f24 <config_keypad_IRQs>
	else{
		GPIOA->ODR &= ~(1U << 7);
	}
*/

	GPIOA->ODR &= ~(1U << 7);
 800115e:	23a0      	movs	r3, #160	; 0xa0
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	438a      	bics	r2, r1
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	e7f6      	b.n	800115e <main+0xe2>
 8001170:	20000000 	.word	0x20000000
 8001174:	ffffefff 	.word	0xffffefff
 8001178:	50000400 	.word	0x50000400
 800117c:	fffffdff 	.word	0xfffffdff

08001180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001182:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001184:	f000 f826 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <LoopForever+0x6>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	; (80011c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <LoopForever+0xe>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	; (80011cc <LoopForever+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011ae:	f000 f81d 	bl	80011ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b2:	f7ff ff63 	bl	800107c <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   r0, =_estack
 80011b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80011c4:	080012ac 	.word	0x080012ac
  ldr r2, =_sbss
 80011c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80011cc:	20000024 	.word	0x20000024

080011d0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_COMP_IRQHandler>
	...

080011d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <SystemInit+0x14>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	0512      	lsls	r2, r2, #20
 80011de:	609a      	str	r2, [r3, #8]
#endif
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__libc_init_array>:
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	2600      	movs	r6, #0
 80011f0:	4d0c      	ldr	r5, [pc, #48]	; (8001224 <__libc_init_array+0x38>)
 80011f2:	4c0d      	ldr	r4, [pc, #52]	; (8001228 <__libc_init_array+0x3c>)
 80011f4:	1b64      	subs	r4, r4, r5
 80011f6:	10a4      	asrs	r4, r4, #2
 80011f8:	42a6      	cmp	r6, r4
 80011fa:	d109      	bne.n	8001210 <__libc_init_array+0x24>
 80011fc:	2600      	movs	r6, #0
 80011fe:	f000 f819 	bl	8001234 <_init>
 8001202:	4d0a      	ldr	r5, [pc, #40]	; (800122c <__libc_init_array+0x40>)
 8001204:	4c0a      	ldr	r4, [pc, #40]	; (8001230 <__libc_init_array+0x44>)
 8001206:	1b64      	subs	r4, r4, r5
 8001208:	10a4      	asrs	r4, r4, #2
 800120a:	42a6      	cmp	r6, r4
 800120c:	d105      	bne.n	800121a <__libc_init_array+0x2e>
 800120e:	bd70      	pop	{r4, r5, r6, pc}
 8001210:	00b3      	lsls	r3, r6, #2
 8001212:	58eb      	ldr	r3, [r5, r3]
 8001214:	4798      	blx	r3
 8001216:	3601      	adds	r6, #1
 8001218:	e7ee      	b.n	80011f8 <__libc_init_array+0xc>
 800121a:	00b3      	lsls	r3, r6, #2
 800121c:	58eb      	ldr	r3, [r5, r3]
 800121e:	4798      	blx	r3
 8001220:	3601      	adds	r6, #1
 8001222:	e7f2      	b.n	800120a <__libc_init_array+0x1e>
 8001224:	080012a4 	.word	0x080012a4
 8001228:	080012a4 	.word	0x080012a4
 800122c:	080012a4 	.word	0x080012a4
 8001230:	080012a8 	.word	0x080012a8

08001234 <_init>:
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123a:	bc08      	pop	{r3}
 800123c:	469e      	mov	lr, r3
 800123e:	4770      	bx	lr

08001240 <_fini>:
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001246:	bc08      	pop	{r3}
 8001248:	469e      	mov	lr, r3
 800124a:	4770      	bx	lr
