
ssd_with_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f00  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800102c  0800102c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001030  08001030  00011030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000008  0800103c  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  0800103c  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001282  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000564  00000000  00000000  000212b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000148  00000000  00000000  00021818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000110  00000000  00000000  00021960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00000ead  00000000  00000000  00021a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000823  00000000  00000000  0002291d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000039c  00000000  00000000  00023194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000fa4 	.word	0x08000fa4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08000fa4 	.word	0x08000fa4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <delay>:
static uint32_t tDelay;
extern uint32_t SystemCoreClock;


/*delay function*/
void delay(volatile uint32_t s){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	for(; s>0; s--);
 8000334:	e002      	b.n	800033c <delay+0x10>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3b01      	subs	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1f9      	bne.n	8000336 <delay+0xa>
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b002      	add	sp, #8
 800034a:	bd80      	pop	{r7, pc}

0800034c <openClock>:

/*COOL FUNCTIONS*/
void openClock(char port){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	0002      	movs	r2, r0
 8000354:	1dfb      	adds	r3, r7, #7
 8000356:	701a      	strb	r2, [r3, #0]

	switch(port){
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	3b41      	subs	r3, #65	; 0x41
 800035e:	2b05      	cmp	r3, #5
 8000360:	d827      	bhi.n	80003b2 <openClock+0x66>
 8000362:	009a      	lsls	r2, r3, #2
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <openClock+0x70>)
 8000366:	18d3      	adds	r3, r2, r3
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	469f      	mov	pc, r3
	case 'A':
		RCC-> IOPENR |= (1U << 0);
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <openClock+0x74>)
 800036e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <openClock+0x74>)
 8000372:	2101      	movs	r1, #1
 8000374:	430a      	orrs	r2, r1
 8000376:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000378:	e01b      	b.n	80003b2 <openClock+0x66>

	case 'B':
		RCC->IOPENR |= (1U << 1);
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <openClock+0x74>)
 800037c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <openClock+0x74>)
 8000380:	2102      	movs	r1, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000386:	e014      	b.n	80003b2 <openClock+0x66>

	case 'C':
		RCC->IOPENR |= (1U << 2);
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <openClock+0x74>)
 800038a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <openClock+0x74>)
 800038e:	2104      	movs	r1, #4
 8000390:	430a      	orrs	r2, r1
 8000392:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000394:	e00d      	b.n	80003b2 <openClock+0x66>

	case 'D':
		RCC->IOPENR |= (1U << 3);
 8000396:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <openClock+0x74>)
 8000398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <openClock+0x74>)
 800039c:	2108      	movs	r1, #8
 800039e:	430a      	orrs	r2, r1
 80003a0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80003a2:	e006      	b.n	80003b2 <openClock+0x66>

	case 'F':
		RCC->IOPENR |= (1U << 5);
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <openClock+0x74>)
 80003a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <openClock+0x74>)
 80003aa:	2120      	movs	r1, #32
 80003ac:	430a      	orrs	r2, r1
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80003b0:	46c0      	nop			; (mov r8, r8)

	}
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b002      	add	sp, #8
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	08000fbc 	.word	0x08000fbc
 80003c0:	40021000 	.word	0x40021000

080003c4 <setMode>:

void setMode(char port, uint32_t num, char IO){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6039      	str	r1, [r7, #0]
 80003cc:	0011      	movs	r1, r2
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	1c02      	adds	r2, r0, #0
 80003d2:	701a      	strb	r2, [r3, #0]
 80003d4:	1dbb      	adds	r3, r7, #6
 80003d6:	1c0a      	adds	r2, r1, #0
 80003d8:	701a      	strb	r2, [r3, #0]

	switch(port){
 80003da:	1dfb      	adds	r3, r7, #7
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3b41      	subs	r3, #65	; 0x41
 80003e0:	2b05      	cmp	r3, #5
 80003e2:	d900      	bls.n	80003e6 <setMode+0x22>
 80003e4:	e140      	b.n	8000668 <setMode+0x2a4>
 80003e6:	009a      	lsls	r2, r3, #2
 80003e8:	4ba1      	ldr	r3, [pc, #644]	; (8000670 <setMode+0x2ac>)
 80003ea:	18d3      	adds	r3, r2, r3
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	469f      	mov	pc, r3
	case 'A':

		if(num == 2 || num == 3){//dont touch PA2 and PA3 ports even user want to change them
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d100      	bne.n	80003f8 <setMode+0x34>
 80003f6:	e137      	b.n	8000668 <setMode+0x2a4>
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	d100      	bne.n	8000400 <setMode+0x3c>
 80003fe:	e133      	b.n	8000668 <setMode+0x2a4>
		break;
		}


		GPIOA-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 8000400:	23a0      	movs	r3, #160	; 0xa0
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	2103      	movs	r1, #3
 800040c:	4099      	lsls	r1, r3
 800040e:	000b      	movs	r3, r1
 8000410:	43d9      	mvns	r1, r3
 8000412:	23a0      	movs	r3, #160	; 0xa0
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	400a      	ands	r2, r1
 8000418:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 800041a:	1dbb      	adds	r3, r7, #6
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b4f      	cmp	r3, #79	; 0x4f
 8000420:	d10b      	bne.n	800043a <setMode+0x76>
			GPIOA-> MODER |= (1U << num*2);
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	6819      	ldr	r1, [r3, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	2201      	movs	r2, #1
 800042e:	409a      	lsls	r2, r3
 8000430:	23a0      	movs	r3, #160	; 0xa0
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	430a      	orrs	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOA -> MODER |= (2U << (num*2));

		}

		break;
 8000438:	e10d      	b.n	8000656 <setMode+0x292>
		else if(IO == 'I'){
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b49      	cmp	r3, #73	; 0x49
 8000440:	d100      	bne.n	8000444 <setMode+0x80>
 8000442:	e108      	b.n	8000656 <setMode+0x292>
		else if(IO == 'A'){//analog input mode
 8000444:	1dbb      	adds	r3, r7, #6
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b41      	cmp	r3, #65	; 0x41
 800044a:	d10b      	bne.n	8000464 <setMode+0xa0>
			GPIOA-> MODER |= (3U << num*2);
 800044c:	23a0      	movs	r3, #160	; 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	6819      	ldr	r1, [r3, #0]
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	2203      	movs	r2, #3
 8000458:	409a      	lsls	r2, r3
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	430a      	orrs	r2, r1
 8000460:	601a      	str	r2, [r3, #0]
		break;
 8000462:	e0f8      	b.n	8000656 <setMode+0x292>
		else if(IO == 'F'){//alternate function mode
 8000464:	1dbb      	adds	r3, r7, #6
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b46      	cmp	r3, #70	; 0x46
 800046a:	d000      	beq.n	800046e <setMode+0xaa>
 800046c:	e0f3      	b.n	8000656 <setMode+0x292>
			GPIOA -> MODER |= (2U << (num*2));
 800046e:	23a0      	movs	r3, #160	; 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	6819      	ldr	r1, [r3, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	2202      	movs	r2, #2
 800047a:	409a      	lsls	r2, r3
 800047c:	23a0      	movs	r3, #160	; 0xa0
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	430a      	orrs	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
		break;
 8000484:	e0e7      	b.n	8000656 <setMode+0x292>

	case 'B':

		GPIOB-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 8000486:	4b7b      	ldr	r3, [pc, #492]	; (8000674 <setMode+0x2b0>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	2103      	movs	r1, #3
 8000490:	4099      	lsls	r1, r3
 8000492:	000b      	movs	r3, r1
 8000494:	43d9      	mvns	r1, r3
 8000496:	4b77      	ldr	r3, [pc, #476]	; (8000674 <setMode+0x2b0>)
 8000498:	400a      	ands	r2, r1
 800049a:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b4f      	cmp	r3, #79	; 0x4f
 80004a2:	d109      	bne.n	80004b8 <setMode+0xf4>
			GPIOB-> MODER |= (1U << num*2);
 80004a4:	4b73      	ldr	r3, [pc, #460]	; (8000674 <setMode+0x2b0>)
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	2201      	movs	r2, #1
 80004ae:	409a      	lsls	r2, r3
 80004b0:	4b70      	ldr	r3, [pc, #448]	; (8000674 <setMode+0x2b0>)
 80004b2:	430a      	orrs	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOB -> MODER |= (2U << (num*2));

		}

		break;
 80004b6:	e0d0      	b.n	800065a <setMode+0x296>
		else if(IO == 'I'){
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b49      	cmp	r3, #73	; 0x49
 80004be:	d100      	bne.n	80004c2 <setMode+0xfe>
 80004c0:	e0cb      	b.n	800065a <setMode+0x296>
		else if(IO == 'A'){//analog input mode
 80004c2:	1dbb      	adds	r3, r7, #6
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b41      	cmp	r3, #65	; 0x41
 80004c8:	d109      	bne.n	80004de <setMode+0x11a>
			GPIOB-> MODER |= (3U << num*2);
 80004ca:	4b6a      	ldr	r3, [pc, #424]	; (8000674 <setMode+0x2b0>)
 80004cc:	6819      	ldr	r1, [r3, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2203      	movs	r2, #3
 80004d4:	409a      	lsls	r2, r3
 80004d6:	4b67      	ldr	r3, [pc, #412]	; (8000674 <setMode+0x2b0>)
 80004d8:	430a      	orrs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
		break;
 80004dc:	e0bd      	b.n	800065a <setMode+0x296>
		else if(IO == 'F'){//alternate function mode
 80004de:	1dbb      	adds	r3, r7, #6
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b46      	cmp	r3, #70	; 0x46
 80004e4:	d000      	beq.n	80004e8 <setMode+0x124>
 80004e6:	e0b8      	b.n	800065a <setMode+0x296>
			GPIOB -> MODER |= (2U << (num*2));
 80004e8:	4b62      	ldr	r3, [pc, #392]	; (8000674 <setMode+0x2b0>)
 80004ea:	6819      	ldr	r1, [r3, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2202      	movs	r2, #2
 80004f2:	409a      	lsls	r2, r3
 80004f4:	4b5f      	ldr	r3, [pc, #380]	; (8000674 <setMode+0x2b0>)
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
		break;
 80004fa:	e0ae      	b.n	800065a <setMode+0x296>

	case 'C':
		GPIOC-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 80004fc:	4b5e      	ldr	r3, [pc, #376]	; (8000678 <setMode+0x2b4>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	2103      	movs	r1, #3
 8000506:	4099      	lsls	r1, r3
 8000508:	000b      	movs	r3, r1
 800050a:	43d9      	mvns	r1, r3
 800050c:	4b5a      	ldr	r3, [pc, #360]	; (8000678 <setMode+0x2b4>)
 800050e:	400a      	ands	r2, r1
 8000510:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b4f      	cmp	r3, #79	; 0x4f
 8000518:	d109      	bne.n	800052e <setMode+0x16a>
			GPIOC-> MODER |= (1U << num*2);
 800051a:	4b57      	ldr	r3, [pc, #348]	; (8000678 <setMode+0x2b4>)
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	2201      	movs	r2, #1
 8000524:	409a      	lsls	r2, r3
 8000526:	4b54      	ldr	r3, [pc, #336]	; (8000678 <setMode+0x2b4>)
 8000528:	430a      	orrs	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOC -> MODER |= (2U << (num*2));

		}

		break;
 800052c:	e097      	b.n	800065e <setMode+0x29a>
		else if(IO == 'I'){
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b49      	cmp	r3, #73	; 0x49
 8000534:	d100      	bne.n	8000538 <setMode+0x174>
 8000536:	e092      	b.n	800065e <setMode+0x29a>
		else if(IO == 'A'){//analog input mode
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b41      	cmp	r3, #65	; 0x41
 800053e:	d109      	bne.n	8000554 <setMode+0x190>
			GPIOC-> MODER |= (3U << num*2);
 8000540:	4b4d      	ldr	r3, [pc, #308]	; (8000678 <setMode+0x2b4>)
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	2203      	movs	r2, #3
 800054a:	409a      	lsls	r2, r3
 800054c:	4b4a      	ldr	r3, [pc, #296]	; (8000678 <setMode+0x2b4>)
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
		break;
 8000552:	e084      	b.n	800065e <setMode+0x29a>
		else if(IO == 'F'){//alternate function mode
 8000554:	1dbb      	adds	r3, r7, #6
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b46      	cmp	r3, #70	; 0x46
 800055a:	d000      	beq.n	800055e <setMode+0x19a>
 800055c:	e07f      	b.n	800065e <setMode+0x29a>
			GPIOC -> MODER |= (2U << (num*2));
 800055e:	4b46      	ldr	r3, [pc, #280]	; (8000678 <setMode+0x2b4>)
 8000560:	6819      	ldr	r1, [r3, #0]
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	2202      	movs	r2, #2
 8000568:	409a      	lsls	r2, r3
 800056a:	4b43      	ldr	r3, [pc, #268]	; (8000678 <setMode+0x2b4>)
 800056c:	430a      	orrs	r2, r1
 800056e:	601a      	str	r2, [r3, #0]
		break;
 8000570:	e075      	b.n	800065e <setMode+0x29a>

	case 'D':
		GPIOD-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 8000572:	4b42      	ldr	r3, [pc, #264]	; (800067c <setMode+0x2b8>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	2103      	movs	r1, #3
 800057c:	4099      	lsls	r1, r3
 800057e:	000b      	movs	r3, r1
 8000580:	43d9      	mvns	r1, r3
 8000582:	4b3e      	ldr	r3, [pc, #248]	; (800067c <setMode+0x2b8>)
 8000584:	400a      	ands	r2, r1
 8000586:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b4f      	cmp	r3, #79	; 0x4f
 800058e:	d109      	bne.n	80005a4 <setMode+0x1e0>
			GPIOD-> MODER |= (1U << num*2);
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <setMode+0x2b8>)
 8000592:	6819      	ldr	r1, [r3, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2201      	movs	r2, #1
 800059a:	409a      	lsls	r2, r3
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <setMode+0x2b8>)
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOD -> MODER |= (2U << (num*2));

		}

		break;
 80005a2:	e05e      	b.n	8000662 <setMode+0x29e>
		else if(IO == 'I'){
 80005a4:	1dbb      	adds	r3, r7, #6
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b49      	cmp	r3, #73	; 0x49
 80005aa:	d05a      	beq.n	8000662 <setMode+0x29e>
		else if(IO == 'A'){//analog input mode
 80005ac:	1dbb      	adds	r3, r7, #6
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b41      	cmp	r3, #65	; 0x41
 80005b2:	d109      	bne.n	80005c8 <setMode+0x204>
			GPIOD-> MODER |= (3U << num*2);
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <setMode+0x2b8>)
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	2203      	movs	r2, #3
 80005be:	409a      	lsls	r2, r3
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <setMode+0x2b8>)
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]
		break;
 80005c6:	e04c      	b.n	8000662 <setMode+0x29e>
		else if(IO == 'F'){//alternate function mode
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b46      	cmp	r3, #70	; 0x46
 80005ce:	d148      	bne.n	8000662 <setMode+0x29e>
			GPIOD -> MODER |= (2U << (num*2));
 80005d0:	4b2a      	ldr	r3, [pc, #168]	; (800067c <setMode+0x2b8>)
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	2202      	movs	r2, #2
 80005da:	409a      	lsls	r2, r3
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <setMode+0x2b8>)
 80005de:	430a      	orrs	r2, r1
 80005e0:	601a      	str	r2, [r3, #0]
		break;
 80005e2:	e03e      	b.n	8000662 <setMode+0x29e>

	case 'F':
		GPIOF-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <setMode+0x2bc>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	4099      	lsls	r1, r3
 80005f0:	000b      	movs	r3, r1
 80005f2:	43d9      	mvns	r1, r3
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <setMode+0x2bc>)
 80005f6:	400a      	ands	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 80005fa:	1dbb      	adds	r3, r7, #6
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b4f      	cmp	r3, #79	; 0x4f
 8000600:	d109      	bne.n	8000616 <setMode+0x252>
			GPIOF-> MODER |= (1U << num*2);
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <setMode+0x2bc>)
 8000604:	6819      	ldr	r1, [r3, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	2201      	movs	r2, #1
 800060c:	409a      	lsls	r2, r3
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <setMode+0x2bc>)
 8000610:	430a      	orrs	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOF -> MODER |= (2U << (num*2));

		}

		break;
 8000614:	e027      	b.n	8000666 <setMode+0x2a2>
		else if(IO == 'I'){
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b49      	cmp	r3, #73	; 0x49
 800061c:	d023      	beq.n	8000666 <setMode+0x2a2>
		else if(IO == 'A'){//analog input mode
 800061e:	1dbb      	adds	r3, r7, #6
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b41      	cmp	r3, #65	; 0x41
 8000624:	d109      	bne.n	800063a <setMode+0x276>
			GPIOF-> MODER |= (3U << num*2);
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <setMode+0x2bc>)
 8000628:	6819      	ldr	r1, [r3, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	2203      	movs	r2, #3
 8000630:	409a      	lsls	r2, r3
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <setMode+0x2bc>)
 8000634:	430a      	orrs	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
		break;
 8000638:	e015      	b.n	8000666 <setMode+0x2a2>
		else if(IO == 'F'){//alternate function mode
 800063a:	1dbb      	adds	r3, r7, #6
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b46      	cmp	r3, #70	; 0x46
 8000640:	d111      	bne.n	8000666 <setMode+0x2a2>
			GPIOF -> MODER |= (2U << (num*2));
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <setMode+0x2bc>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	2202      	movs	r2, #2
 800064c:	409a      	lsls	r2, r3
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <setMode+0x2bc>)
 8000650:	430a      	orrs	r2, r1
 8000652:	601a      	str	r2, [r3, #0]
		break;
 8000654:	e007      	b.n	8000666 <setMode+0x2a2>
		break;
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	e006      	b.n	8000668 <setMode+0x2a4>
		break;
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	e004      	b.n	8000668 <setMode+0x2a4>
		break;
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	e002      	b.n	8000668 <setMode+0x2a4>
		break;
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	e000      	b.n	8000668 <setMode+0x2a4>
		break;
 8000666:	46c0      	nop			; (mov r8, r8)

	}


}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	08000fd4 	.word	0x08000fd4
 8000674:	50000400 	.word	0x50000400
 8000678:	50000800 	.word	0x50000800
 800067c:	50000c00 	.word	0x50000c00
 8000680:	50001400 	.word	0x50001400

08000684 <EXTI0_1_IRQHandler>:
	    SystemCoreClock = 64000000;

}

/*Interrupts*/
void EXTI0_1_IRQHandler(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

		GPIOA-> ODR |= (1U << 7);//open the led on the PA0
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	23a0      	movs	r3, #160	; 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]

		state++;
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <EXTI0_1_IRQHandler+0x44>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <EXTI0_1_IRQHandler+0x44>)
 80006a4:	701a      	strb	r2, [r3, #0]

		if(state > 5){
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <EXTI0_1_IRQHandler+0x44>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b05      	cmp	r3, #5
 80006ae:	d902      	bls.n	80006b6 <EXTI0_1_IRQHandler+0x32>
			state = 0;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <EXTI0_1_IRQHandler+0x44>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	delay(16000);

	}
*/

	EXTI-> RPR1 |= (1 << 0); //clear pending bit
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <EXTI0_1_IRQHandler+0x48>)
 80006b8:	68da      	ldr	r2, [r3, #12]
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <EXTI0_1_IRQHandler+0x48>)
 80006bc:	2101      	movs	r1, #1
 80006be:	430a      	orrs	r2, r1
 80006c0:	60da      	str	r2, [r3, #12]
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	40021800 	.word	0x40021800

080006d0 <configure_A0_int>:

void configure_A0_int(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	RCC-> APBENR2 |= (1U << 0); //enable SYSCFG clock
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <configure_A0_int+0x48>)
 80006d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <configure_A0_int+0x48>)
 80006da:	2101      	movs	r1, #1
 80006dc:	430a      	orrs	r2, r1
 80006de:	641a      	str	r2, [r3, #64]	; 0x40
	EXTI-> EXTICR[0] |= (0U << 8*0); //chose port A (0. port) and 0th pin  (8*0)
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <configure_A0_int+0x4c>)
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <configure_A0_int+0x4c>)
 80006e4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80006e6:	661a      	str	r2, [r3, #96]	; 0x60

	 EXTI->RTSR1 |= (1U << 0);//chose falling edge trigger at A0 (0th pin, so shift 0 bits to the left)
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <configure_A0_int+0x4c>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <configure_A0_int+0x4c>)
 80006ee:	2101      	movs	r1, #1
 80006f0:	430a      	orrs	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]

	    EXTI->IMR1 |= (1U << 0);  // Mask pin 0
 80006f4:	4a09      	ldr	r2, [pc, #36]	; (800071c <configure_A0_int+0x4c>)
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	58d3      	ldr	r3, [r2, r3]
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <configure_A0_int+0x4c>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	4313      	orrs	r3, r2
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	508b      	str	r3, [r1, r2]


	      NVIC_SetPriority(EXTI0_1_IRQn,1);
 8000704:	2101      	movs	r1, #1
 8000706:	2005      	movs	r0, #5
 8000708:	f7ff fda2 	bl	8000250 <__NVIC_SetPriority>
	      NVIC_EnableIRQ(EXTI0_1_IRQn);
 800070c:	2005      	movs	r0, #5
 800070e:	f7ff fd85 	bl	800021c <__NVIC_EnableIRQ>

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	40021800 	.word	0x40021800

08000720 <SysTick_Handler>:


/*SYSTICK functions*/

void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    if (tDelay != 0)
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <SysTick_Handler+0x2c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d004      	beq.n	8000736 <SysTick_Handler+0x16>
    {
        tDelay--;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <SysTick_Handler+0x2c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <SysTick_Handler+0x2c>)
 8000734:	601a      	str	r2, [r3, #0]
    }

    if(tDelay == 0){
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <SysTick_Handler+0x2c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d102      	bne.n	8000744 <SysTick_Handler+0x24>
     	flag = 1;
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Handler+0x30>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
     }

}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000024 	.word	0x20000024
 8000750:	20000028 	.word	0x20000028

08000754 <init_systick>:

void init_systick(uint32_t s){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

    // Clear CTRL register
    SysTick->CTRL = 0x00000;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <init_systick+0x48>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
    // Main clock source is running with HSI by default which is at 8 Mhz.
    // SysTick clock source can be set with CTRL register (Bit 2)
    // 0: Processor clock/8 (AHB/8)
    // 1: Processor clock (AHB)
    SysTick->CTRL |= (1 << 2);
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <init_systick+0x48>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <init_systick+0x48>)
 8000768:	2104      	movs	r1, #4
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]
    // Enable callback (bit 1)
    SysTick->CTRL |= (1 << 1);
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <init_systick+0x48>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <init_systick+0x48>)
 8000774:	2102      	movs	r1, #2
 8000776:	430a      	orrs	r2, r1
 8000778:	601a      	str	r2, [r3, #0]
    // Load the value
    SysTick->LOAD = (uint32_t)(s-1);
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <init_systick+0x48>)
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	3a01      	subs	r2, #1
 8000780:	605a      	str	r2, [r3, #4]
    // Set the current value to 0
    SysTick->VAL = 0;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <init_systick+0x48>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
    // Enable SysTick (bit 0)
    SysTick->CTRL |= (1 << 0);
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <init_systick+0x48>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <init_systick+0x48>)
 800078e:	2101      	movs	r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b002      	add	sp, #8
 800079a:	bd80      	pop	{r7, pc}
 800079c:	e000e010 	.word	0xe000e010

080007a0 <print>:
	GPIOA->ODR &= ~(1U << 11);	//reset  a5
	GPIOA->ODR &= ~(1U << 6);	//reset  a6
}


void print(uint32_t dig){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b09      	cmp	r3, #9
 80007ac:	d900      	bls.n	80007b0 <print+0x10>
 80007ae:	e206      	b.n	8000bbe <print+0x41e>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	009a      	lsls	r2, r3, #2
 80007b4:	4be4      	ldr	r3, [pc, #912]	; (8000b48 <print+0x3a8>)
 80007b6:	18d3      	adds	r3, r2, r3
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	469f      	mov	pc, r3

	switch (dig){

	case 0:
		GPIOB->ODR |= (1U << 2);	//set  d7
 80007bc:	4be3      	ldr	r3, [pc, #908]	; (8000b4c <print+0x3ac>)
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	4be2      	ldr	r3, [pc, #904]	; (8000b4c <print+0x3ac>)
 80007c2:	2104      	movs	r1, #4
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 8);	//set  d8
 80007c8:	4be0      	ldr	r3, [pc, #896]	; (8000b4c <print+0x3ac>)
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	4bdf      	ldr	r3, [pc, #892]	; (8000b4c <print+0x3ac>)
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	0049      	lsls	r1, r1, #1
 80007d2:	430a      	orrs	r2, r1
 80007d4:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 80007d6:	4bdd      	ldr	r3, [pc, #884]	; (8000b4c <print+0x3ac>)
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	4bdc      	ldr	r3, [pc, #880]	; (8000b4c <print+0x3ac>)
 80007dc:	2120      	movs	r1, #32
 80007de:	430a      	orrs	r2, r1
 80007e0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 80007e2:	23a0      	movs	r3, #160	; 0xa0
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2102      	movs	r1, #2
 80007ee:	430a      	orrs	r2, r1
 80007f0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 80007f2:	23a0      	movs	r3, #160	; 0xa0
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	695a      	ldr	r2, [r3, #20]
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0109      	lsls	r1, r1, #4
 8000800:	430a      	orrs	r2, r1
 8000802:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	430a      	orrs	r2, r1
 8000812:	615a      	str	r2, [r3, #20]

		GPIOB->ODR &= ~(1U << 4);	//set  d12
 8000814:	4bcd      	ldr	r3, [pc, #820]	; (8000b4c <print+0x3ac>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	4bcc      	ldr	r3, [pc, #816]	; (8000b4c <print+0x3ac>)
 800081a:	2110      	movs	r1, #16
 800081c:	438a      	bics	r2, r1
 800081e:	615a      	str	r2, [r3, #20]

		break;
 8000820:	e1cd      	b.n	8000bbe <print+0x41e>
	case 1:
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000822:	4bca      	ldr	r3, [pc, #808]	; (8000b4c <print+0x3ac>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4bc9      	ldr	r3, [pc, #804]	; (8000b4c <print+0x3ac>)
 8000828:	2120      	movs	r1, #32
 800082a:	430a      	orrs	r2, r1
 800082c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	23a0      	movs	r3, #160	; 0xa0
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	615a      	str	r2, [r3, #20]

		GPIOB->ODR &= ~(1U << 2);	//set  d7
 800083e:	4bc3      	ldr	r3, [pc, #780]	; (8000b4c <print+0x3ac>)
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4bc2      	ldr	r3, [pc, #776]	; (8000b4c <print+0x3ac>)
 8000844:	2104      	movs	r1, #4
 8000846:	438a      	bics	r2, r1
 8000848:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 8);	//set  d8
 800084a:	4bc0      	ldr	r3, [pc, #768]	; (8000b4c <print+0x3ac>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4bbf      	ldr	r3, [pc, #764]	; (8000b4c <print+0x3ac>)
 8000850:	49bf      	ldr	r1, [pc, #764]	; (8000b50 <print+0x3b0>)
 8000852:	400a      	ands	r2, r1
 8000854:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 11);	//set  a5
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	23a0      	movs	r3, #160	; 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	49bc      	ldr	r1, [pc, #752]	; (8000b54 <print+0x3b4>)
 8000862:	400a      	ands	r2, r1
 8000864:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 6);	//set  a6
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	438a      	bics	r2, r1
 8000874:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 4);	//set  d12
 8000876:	4bb5      	ldr	r3, [pc, #724]	; (8000b4c <print+0x3ac>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	4bb4      	ldr	r3, [pc, #720]	; (8000b4c <print+0x3ac>)
 800087c:	2110      	movs	r1, #16
 800087e:	438a      	bics	r2, r1
 8000880:	615a      	str	r2, [r3, #20]



		break;
 8000882:	e19c      	b.n	8000bbe <print+0x41e>
	case 2:
		GPIOB->ODR |= (1U << 2);	//set  d7
 8000884:	4bb1      	ldr	r3, [pc, #708]	; (8000b4c <print+0x3ac>)
 8000886:	695a      	ldr	r2, [r3, #20]
 8000888:	4bb0      	ldr	r3, [pc, #704]	; (8000b4c <print+0x3ac>)
 800088a:	2104      	movs	r1, #4
 800088c:	430a      	orrs	r2, r1
 800088e:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000890:	4bae      	ldr	r3, [pc, #696]	; (8000b4c <print+0x3ac>)
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	4bad      	ldr	r3, [pc, #692]	; (8000b4c <print+0x3ac>)
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	0049      	lsls	r1, r1, #1
 800089a:	430a      	orrs	r2, r1
 800089c:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 800089e:	4bab      	ldr	r3, [pc, #684]	; (8000b4c <print+0x3ac>)
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	4baa      	ldr	r3, [pc, #680]	; (8000b4c <print+0x3ac>)
 80008a4:	2110      	movs	r1, #16
 80008a6:	430a      	orrs	r2, r1
 80008a8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 80008aa:	23a0      	movs	r3, #160	; 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	2102      	movs	r1, #2
 80008b6:	430a      	orrs	r2, r1
 80008b8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 80008ba:	23a0      	movs	r3, #160	; 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	23a0      	movs	r3, #160	; 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	430a      	orrs	r2, r1
 80008c8:	615a      	str	r2, [r3, #20]



		GPIOB->ODR &= ~(1U << 5);	//set  d11
 80008ca:	4ba0      	ldr	r3, [pc, #640]	; (8000b4c <print+0x3ac>)
 80008cc:	695a      	ldr	r2, [r3, #20]
 80008ce:	4b9f      	ldr	r3, [pc, #636]	; (8000b4c <print+0x3ac>)
 80008d0:	2120      	movs	r1, #32
 80008d2:	438a      	bics	r2, r1
 80008d4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 11);	//set  a5
 80008d6:	23a0      	movs	r3, #160	; 0xa0
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	23a0      	movs	r3, #160	; 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	499c      	ldr	r1, [pc, #624]	; (8000b54 <print+0x3b4>)
 80008e2:	400a      	ands	r2, r1
 80008e4:	615a      	str	r2, [r3, #20]

		break;
 80008e6:	e16a      	b.n	8000bbe <print+0x41e>
	case 3:
		GPIOB->ODR |= (1U << 8);	//set  d8
 80008e8:	4b98      	ldr	r3, [pc, #608]	; (8000b4c <print+0x3ac>)
 80008ea:	695a      	ldr	r2, [r3, #20]
 80008ec:	4b97      	ldr	r3, [pc, #604]	; (8000b4c <print+0x3ac>)
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	0049      	lsls	r1, r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 80008f6:	4b95      	ldr	r3, [pc, #596]	; (8000b4c <print+0x3ac>)
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	4b94      	ldr	r3, [pc, #592]	; (8000b4c <print+0x3ac>)
 80008fc:	2120      	movs	r1, #32
 80008fe:	430a      	orrs	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000902:	4b92      	ldr	r3, [pc, #584]	; (8000b4c <print+0x3ac>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b91      	ldr	r3, [pc, #580]	; (8000b4c <print+0x3ac>)
 8000908:	2110      	movs	r1, #16
 800090a:	430a      	orrs	r2, r1
 800090c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2102      	movs	r1, #2
 800091a:	430a      	orrs	r2, r1
 800091c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 800091e:	23a0      	movs	r3, #160	; 0xa0
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	23a0      	movs	r3, #160	; 0xa0
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	430a      	orrs	r2, r1
 800092c:	615a      	str	r2, [r3, #20]




		GPIOB->ODR &= ~(1U << 2);	//set  d7
 800092e:	4b87      	ldr	r3, [pc, #540]	; (8000b4c <print+0x3ac>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b86      	ldr	r3, [pc, #536]	; (8000b4c <print+0x3ac>)
 8000934:	2104      	movs	r1, #4
 8000936:	438a      	bics	r2, r1
 8000938:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 11);	//set  a5
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	4983      	ldr	r1, [pc, #524]	; (8000b54 <print+0x3b4>)
 8000946:	400a      	ands	r2, r1
 8000948:	615a      	str	r2, [r3, #20]

		break;
 800094a:	e138      	b.n	8000bbe <print+0x41e>
	case 4:
		GPIOB->ODR |= (1U << 5);	//set  d11
 800094c:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <print+0x3ac>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	4b7e      	ldr	r3, [pc, #504]	; (8000b4c <print+0x3ac>)
 8000952:	2120      	movs	r1, #32
 8000954:	430a      	orrs	r2, r1
 8000956:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000958:	4b7c      	ldr	r3, [pc, #496]	; (8000b4c <print+0x3ac>)
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	4b7b      	ldr	r3, [pc, #492]	; (8000b4c <print+0x3ac>)
 800095e:	2110      	movs	r1, #16
 8000960:	430a      	orrs	r2, r1
 8000962:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	695a      	ldr	r2, [r3, #20]
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2102      	movs	r1, #2
 8000970:	430a      	orrs	r2, r1
 8000972:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000974:	23a0      	movs	r3, #160	; 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	0109      	lsls	r1, r1, #4
 8000982:	430a      	orrs	r2, r1
 8000984:	615a      	str	r2, [r3, #20]




		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000986:	4b71      	ldr	r3, [pc, #452]	; (8000b4c <print+0x3ac>)
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	4b70      	ldr	r3, [pc, #448]	; (8000b4c <print+0x3ac>)
 800098c:	2104      	movs	r1, #4
 800098e:	438a      	bics	r2, r1
 8000990:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 8);	//set  d8
 8000992:	4b6e      	ldr	r3, [pc, #440]	; (8000b4c <print+0x3ac>)
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	4b6d      	ldr	r3, [pc, #436]	; (8000b4c <print+0x3ac>)
 8000998:	496d      	ldr	r1, [pc, #436]	; (8000b50 <print+0x3b0>)
 800099a:	400a      	ands	r2, r1
 800099c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 6);	//set  a6
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	23a0      	movs	r3, #160	; 0xa0
 80009a6:	05db      	lsls	r3, r3, #23
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	438a      	bics	r2, r1
 80009ac:	615a      	str	r2, [r3, #20]

		break;
 80009ae:	e106      	b.n	8000bbe <print+0x41e>
	case 5:
		GPIOB->ODR |= (1U << 8);	//set  d8
 80009b0:	4b66      	ldr	r3, [pc, #408]	; (8000b4c <print+0x3ac>)
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	4b65      	ldr	r3, [pc, #404]	; (8000b4c <print+0x3ac>)
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	0049      	lsls	r1, r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 80009be:	4b63      	ldr	r3, [pc, #396]	; (8000b4c <print+0x3ac>)
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <print+0x3ac>)
 80009c4:	2120      	movs	r1, #32
 80009c6:	430a      	orrs	r2, r1
 80009c8:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 80009ca:	4b60      	ldr	r3, [pc, #384]	; (8000b4c <print+0x3ac>)
 80009cc:	695a      	ldr	r2, [r3, #20]
 80009ce:	4b5f      	ldr	r3, [pc, #380]	; (8000b4c <print+0x3ac>)
 80009d0:	2110      	movs	r1, #16
 80009d2:	430a      	orrs	r2, r1
 80009d4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0109      	lsls	r1, r1, #4
 80009e4:	430a      	orrs	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	430a      	orrs	r2, r1
 80009f6:	615a      	str	r2, [r3, #20]




		GPIOA->ODR &= ~(1U << 1);	//set  a1
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2102      	movs	r1, #2
 8000a04:	438a      	bics	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000a08:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <print+0x3ac>)
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <print+0x3ac>)
 8000a0e:	2104      	movs	r1, #4
 8000a10:	438a      	bics	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]

		break;
 8000a14:	e0d3      	b.n	8000bbe <print+0x41e>
	case 6:
		GPIOB->ODR |= (1U << 2);	//set  d7
 8000a16:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <print+0x3ac>)
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <print+0x3ac>)
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000a22:	4b4a      	ldr	r3, [pc, #296]	; (8000b4c <print+0x3ac>)
 8000a24:	695a      	ldr	r2, [r3, #20]
 8000a26:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <print+0x3ac>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0049      	lsls	r1, r1, #1
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000a30:	4b46      	ldr	r3, [pc, #280]	; (8000b4c <print+0x3ac>)
 8000a32:	695a      	ldr	r2, [r3, #20]
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <print+0x3ac>)
 8000a36:	2120      	movs	r1, #32
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000a3c:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <print+0x3ac>)
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <print+0x3ac>)
 8000a42:	2110      	movs	r1, #16
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	0109      	lsls	r1, r1, #4
 8000a56:	430a      	orrs	r2, r1
 8000a58:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000a5a:	23a0      	movs	r3, #160	; 0xa0
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	695a      	ldr	r2, [r3, #20]
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	430a      	orrs	r2, r1
 8000a68:	615a      	str	r2, [r3, #20]




		GPIOA->ODR &= ~(1U << 1);	//set  a1
 8000a6a:	23a0      	movs	r3, #160	; 0xa0
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	2102      	movs	r1, #2
 8000a76:	438a      	bics	r2, r1
 8000a78:	615a      	str	r2, [r3, #20]


		break;
 8000a7a:	e0a0      	b.n	8000bbe <print+0x41e>
	case 7:
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <print+0x3ac>)
 8000a7e:	695a      	ldr	r2, [r3, #20]
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <print+0x3ac>)
 8000a82:	2120      	movs	r1, #32
 8000a84:	430a      	orrs	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000a88:	23a0      	movs	r3, #160	; 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2102      	movs	r1, #2
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	0109      	lsls	r1, r1, #4
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	695a      	ldr	r2, [r3, #20]
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	2140      	movs	r1, #64	; 0x40
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	615a      	str	r2, [r3, #20]





		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <print+0x3ac>)
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <print+0x3ac>)
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	438a      	bics	r2, r1
 8000ac4:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 8);	//set  d8
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <print+0x3ac>)
 8000ac8:	695a      	ldr	r2, [r3, #20]
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <print+0x3ac>)
 8000acc:	4920      	ldr	r1, [pc, #128]	; (8000b50 <print+0x3b0>)
 8000ace:	400a      	ands	r2, r1
 8000ad0:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 4);	//set  d12
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <print+0x3ac>)
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <print+0x3ac>)
 8000ad8:	2110      	movs	r1, #16
 8000ada:	438a      	bics	r2, r1
 8000adc:	615a      	str	r2, [r3, #20]

		break;
 8000ade:	e06e      	b.n	8000bbe <print+0x41e>
	case 8:
		GPIOB->ODR |= (1U << 2);	//set  d7
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <print+0x3ac>)
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <print+0x3ac>)
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <print+0x3ac>)
 8000aee:	695a      	ldr	r2, [r3, #20]
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <print+0x3ac>)
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	0049      	lsls	r1, r1, #1
 8000af6:	430a      	orrs	r2, r1
 8000af8:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <print+0x3ac>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <print+0x3ac>)
 8000b00:	2120      	movs	r1, #32
 8000b02:	430a      	orrs	r2, r1
 8000b04:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000b06:	23a0      	movs	r3, #160	; 0xa0
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2102      	movs	r1, #2
 8000b12:	430a      	orrs	r2, r1
 8000b14:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000b16:	23a0      	movs	r3, #160	; 0xa0
 8000b18:	05db      	lsls	r3, r3, #23
 8000b1a:	695a      	ldr	r2, [r3, #20]
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0109      	lsls	r1, r1, #4
 8000b24:	430a      	orrs	r2, r1
 8000b26:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000b28:	23a0      	movs	r3, #160	; 0xa0
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	430a      	orrs	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <print+0x3ac>)
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <print+0x3ac>)
 8000b3e:	2110      	movs	r1, #16
 8000b40:	430a      	orrs	r2, r1
 8000b42:	615a      	str	r2, [r3, #20]


		break;
 8000b44:	e03b      	b.n	8000bbe <print+0x41e>
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	08000fec 	.word	0x08000fec
 8000b4c:	50000400 	.word	0x50000400
 8000b50:	fffffeff 	.word	0xfffffeff
 8000b54:	fffff7ff 	.word	0xfffff7ff
	case 9:
		GPIOB->ODR |= (1U << 8);	//set  d8
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <print+0x428>)
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <print+0x428>)
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	0049      	lsls	r1, r1, #1
 8000b62:	430a      	orrs	r2, r1
 8000b64:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);	//set  d11
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <print+0x428>)
 8000b68:	695a      	ldr	r2, [r3, #20]
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <print+0x428>)
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);	//set  a1
 8000b72:	23a0      	movs	r3, #160	; 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 11);	//set  a5
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0109      	lsls	r1, r1, #4
 8000b90:	430a      	orrs	r2, r1
 8000b92:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);	//set  a6
 8000b94:	23a0      	movs	r3, #160	; 0xa0
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	23a0      	movs	r3, #160	; 0xa0
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);	//set  d12
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <print+0x428>)
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <print+0x428>)
 8000baa:	2110      	movs	r1, #16
 8000bac:	430a      	orrs	r2, r1
 8000bae:	615a      	str	r2, [r3, #20]




		GPIOB->ODR &= ~(1U << 2);	//set  d7
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <print+0x428>)
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <print+0x428>)
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	438a      	bics	r2, r1
 8000bba:	615a      	str	r2, [r3, #20]


		break;
 8000bbc:	46c0      	nop			; (mov r8, r8)

	}

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	50000400 	.word	0x50000400

08000bcc <ssd_output>:




void ssd_output(uint32_t x){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	uint32_t dig2;
	uint32_t dig3;
	uint32_t dig4;


	dig4 = x % 10U;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	210a      	movs	r1, #10
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fb19 	bl	8000210 <__aeabi_uidivmod>
 8000bde:	000b      	movs	r3, r1
 8000be0:	617b      	str	r3, [r7, #20]
	x = x /10U;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	210a      	movs	r1, #10
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fa8c 	bl	8000104 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	607b      	str	r3, [r7, #4]
	dig3 = x % 10U;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	210a      	movs	r1, #10
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fb0b 	bl	8000210 <__aeabi_uidivmod>
 8000bfa:	000b      	movs	r3, r1
 8000bfc:	613b      	str	r3, [r7, #16]
	x = x /10U;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	210a      	movs	r1, #10
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fa7e 	bl	8000104 <__udivsi3>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	607b      	str	r3, [r7, #4]
	dig2 = x % 10U;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	210a      	movs	r1, #10
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fafd 	bl	8000210 <__aeabi_uidivmod>
 8000c16:	000b      	movs	r3, r1
 8000c18:	60fb      	str	r3, [r7, #12]
	x = x /10U;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	210a      	movs	r1, #10
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff fa70 	bl	8000104 <__udivsi3>
 8000c24:	0003      	movs	r3, r0
 8000c26:	607b      	str	r3, [r7, #4]
	dig1 = x % 10U;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	210a      	movs	r1, #10
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff faef 	bl	8000210 <__aeabi_uidivmod>
 8000c32:	000b      	movs	r3, r1
 8000c34:	60bb      	str	r3, [r7, #8]

flag = 0;
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <ssd_output+0x144>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
while(ddelay > 0){
 8000c3c:	e05e      	b.n	8000cfc <ssd_output+0x130>

	print(dig1);
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fdad 	bl	80007a0 <print>
	GPIOA->ODR &= ~(1U << 12);	//set  a4 to 0
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	695a      	ldr	r2, [r3, #20]
 8000c4c:	23a0      	movs	r3, #160	; 0xa0
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	4930      	ldr	r1, [pc, #192]	; (8000d14 <ssd_output+0x148>)
 8000c52:	400a      	ands	r2, r1
 8000c54:	615a      	str	r2, [r3, #20]
	delay(160);
 8000c56:	20a0      	movs	r0, #160	; 0xa0
 8000c58:	f7ff fb68 	bl	800032c <delay>
	GPIOA->ODR |= (1U << 12);	//set  a4 to 1
 8000c5c:	23a0      	movs	r3, #160	; 0xa0
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	0149      	lsls	r1, r1, #5
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	615a      	str	r2, [r3, #20]
	//reset();

	print(dig2);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fd95 	bl	80007a0 <print>
	GPIOA->ODR &= ~(1U << 5);	//set  a3 to 0
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	23a0      	movs	r3, #160	; 0xa0
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	2120      	movs	r1, #32
 8000c82:	438a      	bics	r2, r1
 8000c84:	615a      	str	r2, [r3, #20]
	delay(160);
 8000c86:	20a0      	movs	r0, #160	; 0xa0
 8000c88:	f7ff fb50 	bl	800032c <delay>
	GPIOA->ODR |= (1U << 5);	//set  a3 to 1
 8000c8c:	23a0      	movs	r3, #160	; 0xa0
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	695a      	ldr	r2, [r3, #20]
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2120      	movs	r1, #32
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	615a      	str	r2, [r3, #20]
	//reset();

	print(dig3);
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fd7e 	bl	80007a0 <print>
	GPIOA->ODR &= ~(1U << 4);	//set  a2 to 0
 8000ca4:	23a0      	movs	r3, #160	; 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	23a0      	movs	r3, #160	; 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	2110      	movs	r1, #16
 8000cb0:	438a      	bics	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]
	delay(160);
 8000cb4:	20a0      	movs	r0, #160	; 0xa0
 8000cb6:	f7ff fb39 	bl	800032c <delay>
	GPIOA->ODR |= (1U << 4);	//set  a2 to 1
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	23a0      	movs	r3, #160	; 0xa0
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	615a      	str	r2, [r3, #20]
//	reset();

	print(dig4);
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fd67 	bl	80007a0 <print>
	GPIOB->ODR &= ~(1U << 9);	//set  d10 to 0
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <ssd_output+0x14c>)
 8000cd4:	695a      	ldr	r2, [r3, #20]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <ssd_output+0x14c>)
 8000cd8:	4910      	ldr	r1, [pc, #64]	; (8000d1c <ssd_output+0x150>)
 8000cda:	400a      	ands	r2, r1
 8000cdc:	615a      	str	r2, [r3, #20]
	delay(160);
 8000cde:	20a0      	movs	r0, #160	; 0xa0
 8000ce0:	f7ff fb24 	bl	800032c <delay>
	GPIOB->ODR |= (1U << 9);	//set  d10 to 1
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <ssd_output+0x14c>)
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <ssd_output+0x14c>)
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	0089      	lsls	r1, r1, #2
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	615a      	str	r2, [r3, #20]
	//reset();


ddelay = ddelay - 1;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <ssd_output+0x154>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <ssd_output+0x154>)
 8000cfa:	601a      	str	r2, [r3, #0]
while(ddelay > 0){
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <ssd_output+0x154>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d19c      	bne.n	8000c3e <ssd_output+0x72>
}




}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b006      	add	sp, #24
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20000028 	.word	0x20000028
 8000d14:	ffffefff 	.word	0xffffefff
 8000d18:	50000400 	.word	0x50000400
 8000d1c:	fffffdff 	.word	0xfffffdff
 8000d20:	20000030 	.word	0x20000030

08000d24 <main>:


volatile uint32_t num = 2359;


int main(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	init_systick(SystemCoreClock/1000);
 8000d28:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <main+0x1a8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	22fa      	movs	r2, #250	; 0xfa
 8000d2e:	0091      	lsls	r1, r2, #2
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff f9e7 	bl	8000104 <__udivsi3>
 8000d36:	0003      	movs	r3, r0
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fd0b 	bl	8000754 <init_systick>
	}
	return 0;

	*/

openClock('A');
 8000d3e:	2041      	movs	r0, #65	; 0x41
 8000d40:	f7ff fb04 	bl	800034c <openClock>
openClock('B');
 8000d44:	2042      	movs	r0, #66	; 0x42
 8000d46:	f7ff fb01 	bl	800034c <openClock>

setMode('A',0,'I');
 8000d4a:	2249      	movs	r2, #73	; 0x49
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2041      	movs	r0, #65	; 0x41
 8000d50:	f7ff fb38 	bl	80003c4 <setMode>
configure_A0_int();
 8000d54:	f7ff fcbc 	bl	80006d0 <configure_A0_int>

setMode('A',1,'O');
 8000d58:	224f      	movs	r2, #79	; 0x4f
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2041      	movs	r0, #65	; 0x41
 8000d5e:	f7ff fb31 	bl	80003c4 <setMode>
setMode('A',4,'O');
 8000d62:	224f      	movs	r2, #79	; 0x4f
 8000d64:	2104      	movs	r1, #4
 8000d66:	2041      	movs	r0, #65	; 0x41
 8000d68:	f7ff fb2c 	bl	80003c4 <setMode>
setMode('A',5,'O');
 8000d6c:	224f      	movs	r2, #79	; 0x4f
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2041      	movs	r0, #65	; 0x41
 8000d72:	f7ff fb27 	bl	80003c4 <setMode>
setMode('A',12,'O');
 8000d76:	224f      	movs	r2, #79	; 0x4f
 8000d78:	210c      	movs	r1, #12
 8000d7a:	2041      	movs	r0, #65	; 0x41
 8000d7c:	f7ff fb22 	bl	80003c4 <setMode>
setMode('A',11,'O');
 8000d80:	224f      	movs	r2, #79	; 0x4f
 8000d82:	210b      	movs	r1, #11
 8000d84:	2041      	movs	r0, #65	; 0x41
 8000d86:	f7ff fb1d 	bl	80003c4 <setMode>
setMode('A',6,'O');
 8000d8a:	224f      	movs	r2, #79	; 0x4f
 8000d8c:	2106      	movs	r1, #6
 8000d8e:	2041      	movs	r0, #65	; 0x41
 8000d90:	f7ff fb18 	bl	80003c4 <setMode>

setMode('B',2,'O');
 8000d94:	224f      	movs	r2, #79	; 0x4f
 8000d96:	2102      	movs	r1, #2
 8000d98:	2042      	movs	r0, #66	; 0x42
 8000d9a:	f7ff fb13 	bl	80003c4 <setMode>
setMode('B',8,'O');
 8000d9e:	224f      	movs	r2, #79	; 0x4f
 8000da0:	2108      	movs	r1, #8
 8000da2:	2042      	movs	r0, #66	; 0x42
 8000da4:	f7ff fb0e 	bl	80003c4 <setMode>
setMode('A',8,'O');
 8000da8:	224f      	movs	r2, #79	; 0x4f
 8000daa:	2108      	movs	r1, #8
 8000dac:	2041      	movs	r0, #65	; 0x41
 8000dae:	f7ff fb09 	bl	80003c4 <setMode>
setMode('B',9,'O');
 8000db2:	224f      	movs	r2, #79	; 0x4f
 8000db4:	2109      	movs	r1, #9
 8000db6:	2042      	movs	r0, #66	; 0x42
 8000db8:	f7ff fb04 	bl	80003c4 <setMode>
setMode('B',5,'O');
 8000dbc:	224f      	movs	r2, #79	; 0x4f
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	2042      	movs	r0, #66	; 0x42
 8000dc2:	f7ff faff 	bl	80003c4 <setMode>
setMode('B',4,'O');
 8000dc6:	224f      	movs	r2, #79	; 0x4f
 8000dc8:	2104      	movs	r1, #4
 8000dca:	2042      	movs	r0, #66	; 0x42
 8000dcc:	f7ff fafa 	bl	80003c4 <setMode>


//denemelik
setMode('A',7,'O');
 8000dd0:	224f      	movs	r2, #79	; 0x4f
 8000dd2:	2107      	movs	r1, #7
 8000dd4:	2041      	movs	r0, #65	; 0x41
 8000dd6:	f7ff faf5 	bl	80003c4 <setMode>
state = mod1;
 8000dda:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <main+0x1ac>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]





GPIOA->ODR &= ~(1U << 12);	//set  a4 to 1
 8000de0:	23a0      	movs	r3, #160	; 0xa0
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	23a0      	movs	r3, #160	; 0xa0
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	493a      	ldr	r1, [pc, #232]	; (8000ed4 <main+0x1b0>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	615a      	str	r2, [r3, #20]
GPIOA->ODR &= ~(1U << 5);	//set  a3 to 1
 8000df0:	23a0      	movs	r3, #160	; 0xa0
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	695a      	ldr	r2, [r3, #20]
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	615a      	str	r2, [r3, #20]
GPIOA->ODR &= ~(1U << 4);	//set  a2 to 1
 8000e00:	23a0      	movs	r3, #160	; 0xa0
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	615a      	str	r2, [r3, #20]
GPIOB->ODR &= ~(1U << 9);	//set  d10 to 1
 8000e10:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <main+0x1b4>)
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <main+0x1b4>)
 8000e16:	4931      	ldr	r1, [pc, #196]	; (8000edc <main+0x1b8>)
 8000e18:	400a      	ands	r2, r1
 8000e1a:	615a      	str	r2, [r3, #20]


while(1){
	ssd_output(num);
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <main+0x1bc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fed3 	bl	8000bcc <ssd_output>

	ddelay = 1600;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <main+0x1c0>)
 8000e28:	22c8      	movs	r2, #200	; 0xc8
 8000e2a:	00d2      	lsls	r2, r2, #3
 8000e2c:	601a      	str	r2, [r3, #0]

	switch(state){
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <main+0x1ac>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	d81f      	bhi.n	8000e78 <main+0x154>
 8000e38:	009a      	lsls	r2, r3, #2
 8000e3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <main+0x1c4>)
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	469f      	mov	pc, r3
	case mod0:
		ddelay = 1600;
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <main+0x1c0>)
 8000e44:	22c8      	movs	r2, #200	; 0xc8
 8000e46:	00d2      	lsls	r2, r2, #3
 8000e48:	601a      	str	r2, [r3, #0]
		break;
 8000e4a:	e015      	b.n	8000e78 <main+0x154>
	case mod1:
		ddelay = 2000;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <main+0x1c0>)
 8000e4e:	22fa      	movs	r2, #250	; 0xfa
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	601a      	str	r2, [r3, #0]
		break;
 8000e54:	e010      	b.n	8000e78 <main+0x154>
	case mod2:
		ddelay = 800;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <main+0x1c0>)
 8000e58:	22c8      	movs	r2, #200	; 0xc8
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	601a      	str	r2, [r3, #0]
		break;
 8000e5e:	e00b      	b.n	8000e78 <main+0x154>
	case mod3:
		ddelay = 160;
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <main+0x1c0>)
 8000e62:	22a0      	movs	r2, #160	; 0xa0
 8000e64:	601a      	str	r2, [r3, #0]
		break;
 8000e66:	e007      	b.n	8000e78 <main+0x154>
	case mod4:
		ddelay = 16;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <main+0x1c0>)
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	601a      	str	r2, [r3, #0]
		break;
 8000e6e:	e003      	b.n	8000e78 <main+0x154>
	case mod5:
		ddelay = 8;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <main+0x1c0>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	601a      	str	r2, [r3, #0]
		break;
 8000e76:	46c0      	nop			; (mov r8, r8)
	}

	if(((num / 10) % 10) > 5){
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <main+0x1bc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	210a      	movs	r1, #10
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff f940 	bl	8000104 <__udivsi3>
 8000e84:	0003      	movs	r3, r0
 8000e86:	210a      	movs	r1, #10
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff f9c1 	bl	8000210 <__aeabi_uidivmod>
 8000e8e:	000b      	movs	r3, r1
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d906      	bls.n	8000ea2 <main+0x17e>
		num=num - 40;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <main+0x1bc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b28      	subs	r3, #40	; 0x28
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <main+0x1bc>)
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e006      	b.n	8000eb0 <main+0x18c>
	}

	else if(num == 0){
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <main+0x1bc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <main+0x18c>
		num = 2359;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <main+0x1bc>)
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <main+0x1c8>)
 8000eae:	601a      	str	r2, [r3, #0]
	}

	num--;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <main+0x1bc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <main+0x1bc>)
 8000eb8:	601a      	str	r2, [r3, #0]

	GPIOA-> ODR  &= ~(1U << 7);
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	23a0      	movs	r3, #160	; 0xa0
 8000ec2:	05db      	lsls	r3, r3, #23
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	615a      	str	r2, [r3, #20]
	ssd_output(num);
 8000eca:	e7a7      	b.n	8000e1c <main+0xf8>
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	2000002c 	.word	0x2000002c
 8000ed4:	ffffefff 	.word	0xffffefff
 8000ed8:	50000400 	.word	0x50000400
 8000edc:	fffffdff 	.word	0xfffffdff
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000030 	.word	0x20000030
 8000ee8:	08001014 	.word	0x08001014
 8000eec:	00000937 	.word	0x00000937

08000ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ef4:	f000 f826 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopForever+0xe>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopForever+0x16>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f1e:	f000 f81d 	bl	8000f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f22:	f7ff feff 	bl	8000d24 <main>

08000f26 <LoopForever>:

LoopForever:
    b LoopForever
 8000f26:	e7fe      	b.n	8000f26 <LoopForever>
  ldr   r0, =_estack
 8000f28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000f34:	08001034 	.word	0x08001034
  ldr r2, =_sbss
 8000f38:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000f3c:	20000034 	.word	0x20000034

08000f40 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_COMP_IRQHandler>
	...

08000f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <SystemInit+0x14>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	0512      	lsls	r2, r2, #20
 8000f4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__libc_init_array>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	2600      	movs	r6, #0
 8000f60:	4d0c      	ldr	r5, [pc, #48]	; (8000f94 <__libc_init_array+0x38>)
 8000f62:	4c0d      	ldr	r4, [pc, #52]	; (8000f98 <__libc_init_array+0x3c>)
 8000f64:	1b64      	subs	r4, r4, r5
 8000f66:	10a4      	asrs	r4, r4, #2
 8000f68:	42a6      	cmp	r6, r4
 8000f6a:	d109      	bne.n	8000f80 <__libc_init_array+0x24>
 8000f6c:	2600      	movs	r6, #0
 8000f6e:	f000 f819 	bl	8000fa4 <_init>
 8000f72:	4d0a      	ldr	r5, [pc, #40]	; (8000f9c <__libc_init_array+0x40>)
 8000f74:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <__libc_init_array+0x44>)
 8000f76:	1b64      	subs	r4, r4, r5
 8000f78:	10a4      	asrs	r4, r4, #2
 8000f7a:	42a6      	cmp	r6, r4
 8000f7c:	d105      	bne.n	8000f8a <__libc_init_array+0x2e>
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	00b3      	lsls	r3, r6, #2
 8000f82:	58eb      	ldr	r3, [r5, r3]
 8000f84:	4798      	blx	r3
 8000f86:	3601      	adds	r6, #1
 8000f88:	e7ee      	b.n	8000f68 <__libc_init_array+0xc>
 8000f8a:	00b3      	lsls	r3, r6, #2
 8000f8c:	58eb      	ldr	r3, [r5, r3]
 8000f8e:	4798      	blx	r3
 8000f90:	3601      	adds	r6, #1
 8000f92:	e7f2      	b.n	8000f7a <__libc_init_array+0x1e>
 8000f94:	0800102c 	.word	0x0800102c
 8000f98:	0800102c 	.word	0x0800102c
 8000f9c:	0800102c 	.word	0x0800102c
 8000fa0:	08001030 	.word	0x08001030

08000fa4 <_init>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr

08000fb0 <_fini>:
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb6:	bc08      	pop	{r3}
 8000fb8:	469e      	mov	lr, r3
 8000fba:	4770      	bx	lr
