
kutuphane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000670  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800072c  0800072c  0001072c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800075c  0800075c  0001075c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000760  08000760  00010760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000768  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000024  08000768  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001106  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000486  00000000  00000000  00021132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000130  00000000  00000000  000215b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000f8  00000000  00000000  000216e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00000d10  00000000  00000000  000217e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000007c5  00000000  00000000  000224f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  00022cb5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000340  00000000  00000000  00022d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000714 	.word	0x08000714

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000714 	.word	0x08000714

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <openClock>:
void delay(volatile uint32_t s){
	for(; s>0; s--);
}

/*COOL FUNCTIONS*/
void openClock(char port){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]

	switch(port){
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3b41      	subs	r3, #65	; 0x41
 800022e:	2b05      	cmp	r3, #5
 8000230:	d827      	bhi.n	8000282 <openClock+0x66>
 8000232:	009a      	lsls	r2, r3, #2
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <openClock+0x70>)
 8000236:	18d3      	adds	r3, r2, r3
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	469f      	mov	pc, r3
	case 'A':
		RCC-> IOPENR |= (1U << 0);
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <openClock+0x74>)
 800023e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <openClock+0x74>)
 8000242:	2101      	movs	r1, #1
 8000244:	430a      	orrs	r2, r1
 8000246:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000248:	e01b      	b.n	8000282 <openClock+0x66>

	case 'B':
		RCC->IOPENR |= (1U << 1);
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <openClock+0x74>)
 800024c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <openClock+0x74>)
 8000250:	2102      	movs	r1, #2
 8000252:	430a      	orrs	r2, r1
 8000254:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000256:	e014      	b.n	8000282 <openClock+0x66>

	case 'C':
		RCC->IOPENR |= (1U << 2);
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <openClock+0x74>)
 800025a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <openClock+0x74>)
 800025e:	2104      	movs	r1, #4
 8000260:	430a      	orrs	r2, r1
 8000262:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000264:	e00d      	b.n	8000282 <openClock+0x66>

	case 'D':
		RCC->IOPENR |= (1U << 3);
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <openClock+0x74>)
 8000268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <openClock+0x74>)
 800026c:	2108      	movs	r1, #8
 800026e:	430a      	orrs	r2, r1
 8000270:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000272:	e006      	b.n	8000282 <openClock+0x66>

	case 'F':
		RCC->IOPENR |= (1U << 5);
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <openClock+0x74>)
 8000276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <openClock+0x74>)
 800027a:	2120      	movs	r1, #32
 800027c:	430a      	orrs	r2, r1
 800027e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000280:	46c0      	nop			; (mov r8, r8)

	}
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b002      	add	sp, #8
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	0800072c 	.word	0x0800072c
 8000290:	40021000 	.word	0x40021000

08000294 <setMode>:

void setMode(char port, uint32_t num, char IO){
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6039      	str	r1, [r7, #0]
 800029c:	0011      	movs	r1, r2
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	1c02      	adds	r2, r0, #0
 80002a2:	701a      	strb	r2, [r3, #0]
 80002a4:	1dbb      	adds	r3, r7, #6
 80002a6:	1c0a      	adds	r2, r1, #0
 80002a8:	701a      	strb	r2, [r3, #0]

	switch(port){
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b41      	subs	r3, #65	; 0x41
 80002b0:	2b05      	cmp	r3, #5
 80002b2:	d900      	bls.n	80002b6 <setMode+0x22>
 80002b4:	e140      	b.n	8000538 <setMode+0x2a4>
 80002b6:	009a      	lsls	r2, r3, #2
 80002b8:	4ba1      	ldr	r3, [pc, #644]	; (8000540 <setMode+0x2ac>)
 80002ba:	18d3      	adds	r3, r2, r3
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	469f      	mov	pc, r3
	case 'A':

		if(num == 2 || num == 3){//dont touch PA2 and PA3 ports even user want to change them
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d100      	bne.n	80002c8 <setMode+0x34>
 80002c6:	e137      	b.n	8000538 <setMode+0x2a4>
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	d100      	bne.n	80002d0 <setMode+0x3c>
 80002ce:	e133      	b.n	8000538 <setMode+0x2a4>
		break;
		}


		GPIOA-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 80002d0:	23a0      	movs	r3, #160	; 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	2103      	movs	r1, #3
 80002dc:	4099      	lsls	r1, r3
 80002de:	000b      	movs	r3, r1
 80002e0:	43d9      	mvns	r1, r3
 80002e2:	23a0      	movs	r3, #160	; 0xa0
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	400a      	ands	r2, r1
 80002e8:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 80002ea:	1dbb      	adds	r3, r7, #6
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b4f      	cmp	r3, #79	; 0x4f
 80002f0:	d10b      	bne.n	800030a <setMode+0x76>
			GPIOA-> MODER |= (1U << num*2);
 80002f2:	23a0      	movs	r3, #160	; 0xa0
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	2201      	movs	r2, #1
 80002fe:	409a      	lsls	r2, r3
 8000300:	23a0      	movs	r3, #160	; 0xa0
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	430a      	orrs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOA -> MODER |= (2U << (num*2));

		}

		break;
 8000308:	e10d      	b.n	8000526 <setMode+0x292>
		else if(IO == 'I'){
 800030a:	1dbb      	adds	r3, r7, #6
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b49      	cmp	r3, #73	; 0x49
 8000310:	d100      	bne.n	8000314 <setMode+0x80>
 8000312:	e108      	b.n	8000526 <setMode+0x292>
		else if(IO == 'A'){//analog input mode
 8000314:	1dbb      	adds	r3, r7, #6
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b41      	cmp	r3, #65	; 0x41
 800031a:	d10b      	bne.n	8000334 <setMode+0xa0>
			GPIOA-> MODER |= (3U << num*2);
 800031c:	23a0      	movs	r3, #160	; 0xa0
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	6819      	ldr	r1, [r3, #0]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	2203      	movs	r2, #3
 8000328:	409a      	lsls	r2, r3
 800032a:	23a0      	movs	r3, #160	; 0xa0
 800032c:	05db      	lsls	r3, r3, #23
 800032e:	430a      	orrs	r2, r1
 8000330:	601a      	str	r2, [r3, #0]
		break;
 8000332:	e0f8      	b.n	8000526 <setMode+0x292>
		else if(IO == 'F'){//alternate function mode
 8000334:	1dbb      	adds	r3, r7, #6
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b46      	cmp	r3, #70	; 0x46
 800033a:	d000      	beq.n	800033e <setMode+0xaa>
 800033c:	e0f3      	b.n	8000526 <setMode+0x292>
			GPIOA -> MODER |= (2U << (num*2));
 800033e:	23a0      	movs	r3, #160	; 0xa0
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	6819      	ldr	r1, [r3, #0]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	2202      	movs	r2, #2
 800034a:	409a      	lsls	r2, r3
 800034c:	23a0      	movs	r3, #160	; 0xa0
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	430a      	orrs	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
		break;
 8000354:	e0e7      	b.n	8000526 <setMode+0x292>

	case 'B':

		GPIOB-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 8000356:	4b7b      	ldr	r3, [pc, #492]	; (8000544 <setMode+0x2b0>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	2103      	movs	r1, #3
 8000360:	4099      	lsls	r1, r3
 8000362:	000b      	movs	r3, r1
 8000364:	43d9      	mvns	r1, r3
 8000366:	4b77      	ldr	r3, [pc, #476]	; (8000544 <setMode+0x2b0>)
 8000368:	400a      	ands	r2, r1
 800036a:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 800036c:	1dbb      	adds	r3, r7, #6
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b4f      	cmp	r3, #79	; 0x4f
 8000372:	d109      	bne.n	8000388 <setMode+0xf4>
			GPIOB-> MODER |= (1U << num*2);
 8000374:	4b73      	ldr	r3, [pc, #460]	; (8000544 <setMode+0x2b0>)
 8000376:	6819      	ldr	r1, [r3, #0]
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	2201      	movs	r2, #1
 800037e:	409a      	lsls	r2, r3
 8000380:	4b70      	ldr	r3, [pc, #448]	; (8000544 <setMode+0x2b0>)
 8000382:	430a      	orrs	r2, r1
 8000384:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOB -> MODER |= (2U << (num*2));

		}

		break;
 8000386:	e0d0      	b.n	800052a <setMode+0x296>
		else if(IO == 'I'){
 8000388:	1dbb      	adds	r3, r7, #6
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b49      	cmp	r3, #73	; 0x49
 800038e:	d100      	bne.n	8000392 <setMode+0xfe>
 8000390:	e0cb      	b.n	800052a <setMode+0x296>
		else if(IO == 'A'){//analog input mode
 8000392:	1dbb      	adds	r3, r7, #6
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b41      	cmp	r3, #65	; 0x41
 8000398:	d109      	bne.n	80003ae <setMode+0x11a>
			GPIOB-> MODER |= (3U << num*2);
 800039a:	4b6a      	ldr	r3, [pc, #424]	; (8000544 <setMode+0x2b0>)
 800039c:	6819      	ldr	r1, [r3, #0]
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2203      	movs	r2, #3
 80003a4:	409a      	lsls	r2, r3
 80003a6:	4b67      	ldr	r3, [pc, #412]	; (8000544 <setMode+0x2b0>)
 80003a8:	430a      	orrs	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
		break;
 80003ac:	e0bd      	b.n	800052a <setMode+0x296>
		else if(IO == 'F'){//alternate function mode
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b46      	cmp	r3, #70	; 0x46
 80003b4:	d000      	beq.n	80003b8 <setMode+0x124>
 80003b6:	e0b8      	b.n	800052a <setMode+0x296>
			GPIOB -> MODER |= (2U << (num*2));
 80003b8:	4b62      	ldr	r3, [pc, #392]	; (8000544 <setMode+0x2b0>)
 80003ba:	6819      	ldr	r1, [r3, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	2202      	movs	r2, #2
 80003c2:	409a      	lsls	r2, r3
 80003c4:	4b5f      	ldr	r3, [pc, #380]	; (8000544 <setMode+0x2b0>)
 80003c6:	430a      	orrs	r2, r1
 80003c8:	601a      	str	r2, [r3, #0]
		break;
 80003ca:	e0ae      	b.n	800052a <setMode+0x296>

	case 'C':
		GPIOC-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 80003cc:	4b5e      	ldr	r3, [pc, #376]	; (8000548 <setMode+0x2b4>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	2103      	movs	r1, #3
 80003d6:	4099      	lsls	r1, r3
 80003d8:	000b      	movs	r3, r1
 80003da:	43d9      	mvns	r1, r3
 80003dc:	4b5a      	ldr	r3, [pc, #360]	; (8000548 <setMode+0x2b4>)
 80003de:	400a      	ands	r2, r1
 80003e0:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 80003e2:	1dbb      	adds	r3, r7, #6
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b4f      	cmp	r3, #79	; 0x4f
 80003e8:	d109      	bne.n	80003fe <setMode+0x16a>
			GPIOC-> MODER |= (1U << num*2);
 80003ea:	4b57      	ldr	r3, [pc, #348]	; (8000548 <setMode+0x2b4>)
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	2201      	movs	r2, #1
 80003f4:	409a      	lsls	r2, r3
 80003f6:	4b54      	ldr	r3, [pc, #336]	; (8000548 <setMode+0x2b4>)
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOC -> MODER |= (2U << (num*2));

		}

		break;
 80003fc:	e097      	b.n	800052e <setMode+0x29a>
		else if(IO == 'I'){
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b49      	cmp	r3, #73	; 0x49
 8000404:	d100      	bne.n	8000408 <setMode+0x174>
 8000406:	e092      	b.n	800052e <setMode+0x29a>
		else if(IO == 'A'){//analog input mode
 8000408:	1dbb      	adds	r3, r7, #6
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b41      	cmp	r3, #65	; 0x41
 800040e:	d109      	bne.n	8000424 <setMode+0x190>
			GPIOC-> MODER |= (3U << num*2);
 8000410:	4b4d      	ldr	r3, [pc, #308]	; (8000548 <setMode+0x2b4>)
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	2203      	movs	r2, #3
 800041a:	409a      	lsls	r2, r3
 800041c:	4b4a      	ldr	r3, [pc, #296]	; (8000548 <setMode+0x2b4>)
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
		break;
 8000422:	e084      	b.n	800052e <setMode+0x29a>
		else if(IO == 'F'){//alternate function mode
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b46      	cmp	r3, #70	; 0x46
 800042a:	d000      	beq.n	800042e <setMode+0x19a>
 800042c:	e07f      	b.n	800052e <setMode+0x29a>
			GPIOC -> MODER |= (2U << (num*2));
 800042e:	4b46      	ldr	r3, [pc, #280]	; (8000548 <setMode+0x2b4>)
 8000430:	6819      	ldr	r1, [r3, #0]
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	2202      	movs	r2, #2
 8000438:	409a      	lsls	r2, r3
 800043a:	4b43      	ldr	r3, [pc, #268]	; (8000548 <setMode+0x2b4>)
 800043c:	430a      	orrs	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
		break;
 8000440:	e075      	b.n	800052e <setMode+0x29a>

	case 'D':
		GPIOD-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 8000442:	4b42      	ldr	r3, [pc, #264]	; (800054c <setMode+0x2b8>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	2103      	movs	r1, #3
 800044c:	4099      	lsls	r1, r3
 800044e:	000b      	movs	r3, r1
 8000450:	43d9      	mvns	r1, r3
 8000452:	4b3e      	ldr	r3, [pc, #248]	; (800054c <setMode+0x2b8>)
 8000454:	400a      	ands	r2, r1
 8000456:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 8000458:	1dbb      	adds	r3, r7, #6
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b4f      	cmp	r3, #79	; 0x4f
 800045e:	d109      	bne.n	8000474 <setMode+0x1e0>
			GPIOD-> MODER |= (1U << num*2);
 8000460:	4b3a      	ldr	r3, [pc, #232]	; (800054c <setMode+0x2b8>)
 8000462:	6819      	ldr	r1, [r3, #0]
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	2201      	movs	r2, #1
 800046a:	409a      	lsls	r2, r3
 800046c:	4b37      	ldr	r3, [pc, #220]	; (800054c <setMode+0x2b8>)
 800046e:	430a      	orrs	r2, r1
 8000470:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOD -> MODER |= (2U << (num*2));

		}

		break;
 8000472:	e05e      	b.n	8000532 <setMode+0x29e>
		else if(IO == 'I'){
 8000474:	1dbb      	adds	r3, r7, #6
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b49      	cmp	r3, #73	; 0x49
 800047a:	d05a      	beq.n	8000532 <setMode+0x29e>
		else if(IO == 'A'){//analog input mode
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b41      	cmp	r3, #65	; 0x41
 8000482:	d109      	bne.n	8000498 <setMode+0x204>
			GPIOD-> MODER |= (3U << num*2);
 8000484:	4b31      	ldr	r3, [pc, #196]	; (800054c <setMode+0x2b8>)
 8000486:	6819      	ldr	r1, [r3, #0]
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	2203      	movs	r2, #3
 800048e:	409a      	lsls	r2, r3
 8000490:	4b2e      	ldr	r3, [pc, #184]	; (800054c <setMode+0x2b8>)
 8000492:	430a      	orrs	r2, r1
 8000494:	601a      	str	r2, [r3, #0]
		break;
 8000496:	e04c      	b.n	8000532 <setMode+0x29e>
		else if(IO == 'F'){//alternate function mode
 8000498:	1dbb      	adds	r3, r7, #6
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b46      	cmp	r3, #70	; 0x46
 800049e:	d148      	bne.n	8000532 <setMode+0x29e>
			GPIOD -> MODER |= (2U << (num*2));
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <setMode+0x2b8>)
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	2202      	movs	r2, #2
 80004aa:	409a      	lsls	r2, r3
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <setMode+0x2b8>)
 80004ae:	430a      	orrs	r2, r1
 80004b0:	601a      	str	r2, [r3, #0]
		break;
 80004b2:	e03e      	b.n	8000532 <setMode+0x29e>

	case 'F':
		GPIOF-> MODER &= ~(3U << num*2); // set 0 both bytes (input mode)
 80004b4:	4b26      	ldr	r3, [pc, #152]	; (8000550 <setMode+0x2bc>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	2103      	movs	r1, #3
 80004be:	4099      	lsls	r1, r3
 80004c0:	000b      	movs	r3, r1
 80004c2:	43d9      	mvns	r1, r3
 80004c4:	4b22      	ldr	r3, [pc, #136]	; (8000550 <setMode+0x2bc>)
 80004c6:	400a      	ands	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]

		if(IO == 'O'){//output mode
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b4f      	cmp	r3, #79	; 0x4f
 80004d0:	d109      	bne.n	80004e6 <setMode+0x252>
			GPIOF-> MODER |= (1U << num*2);
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <setMode+0x2bc>)
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	2201      	movs	r2, #1
 80004dc:	409a      	lsls	r2, r3
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <setMode+0x2bc>)
 80004e0:	430a      	orrs	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]
		else if(IO == 'F'){//alternate function mode
			GPIOF -> MODER |= (2U << (num*2));

		}

		break;
 80004e4:	e027      	b.n	8000536 <setMode+0x2a2>
		else if(IO == 'I'){
 80004e6:	1dbb      	adds	r3, r7, #6
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b49      	cmp	r3, #73	; 0x49
 80004ec:	d023      	beq.n	8000536 <setMode+0x2a2>
		else if(IO == 'A'){//analog input mode
 80004ee:	1dbb      	adds	r3, r7, #6
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b41      	cmp	r3, #65	; 0x41
 80004f4:	d109      	bne.n	800050a <setMode+0x276>
			GPIOF-> MODER |= (3U << num*2);
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <setMode+0x2bc>)
 80004f8:	6819      	ldr	r1, [r3, #0]
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	2203      	movs	r2, #3
 8000500:	409a      	lsls	r2, r3
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <setMode+0x2bc>)
 8000504:	430a      	orrs	r2, r1
 8000506:	601a      	str	r2, [r3, #0]
		break;
 8000508:	e015      	b.n	8000536 <setMode+0x2a2>
		else if(IO == 'F'){//alternate function mode
 800050a:	1dbb      	adds	r3, r7, #6
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b46      	cmp	r3, #70	; 0x46
 8000510:	d111      	bne.n	8000536 <setMode+0x2a2>
			GPIOF -> MODER |= (2U << (num*2));
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <setMode+0x2bc>)
 8000514:	6819      	ldr	r1, [r3, #0]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	2202      	movs	r2, #2
 800051c:	409a      	lsls	r2, r3
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <setMode+0x2bc>)
 8000520:	430a      	orrs	r2, r1
 8000522:	601a      	str	r2, [r3, #0]
		break;
 8000524:	e007      	b.n	8000536 <setMode+0x2a2>
		break;
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	e006      	b.n	8000538 <setMode+0x2a4>
		break;
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	e004      	b.n	8000538 <setMode+0x2a4>
		break;
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	e002      	b.n	8000538 <setMode+0x2a4>
		break;
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	e000      	b.n	8000538 <setMode+0x2a4>
		break;
 8000536:	46c0      	nop			; (mov r8, r8)

	}


}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b002      	add	sp, #8
 800053e:	bd80      	pop	{r7, pc}
 8000540:	08000744 	.word	0x08000744
 8000544:	50000400 	.word	0x50000400
 8000548:	50000800 	.word	0x50000800
 800054c:	50000c00 	.word	0x50000c00
 8000550:	50001400 	.word	0x50001400

08000554 <EXTI0_1_IRQHandler>:
	    SystemCoreClock = 84000000;

}

/*Interrupts*/
void EXTI0_1_IRQHandler(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

		GPIOA-> ODR |= (1U << 6);//open the led on the PA0
 8000558:	23a0      	movs	r3, #160	; 0xa0
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	23a0      	movs	r3, #160	; 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2140      	movs	r1, #64	; 0x40
 8000564:	430a      	orrs	r2, r1
 8000566:	615a      	str	r2, [r3, #20]


	EXTI-> RPR1 |= (1 << 0); //clear pending bit
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <EXTI0_1_IRQHandler+0x28>)
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <EXTI0_1_IRQHandler+0x28>)
 800056e:	2101      	movs	r1, #1
 8000570:	430a      	orrs	r2, r1
 8000572:	60da      	str	r2, [r3, #12]
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40021800 	.word	0x40021800

08000580 <SysTick_Handler>:


/*SYSTICK functions*/

void SysTick_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    if (tDelay != 0)
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <SysTick_Handler+0x1c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d004      	beq.n	8000596 <SysTick_Handler+0x16>
    {
        tDelay--;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <SysTick_Handler+0x1c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	4b02      	ldr	r3, [pc, #8]	; (800059c <SysTick_Handler+0x1c>)
 8000594:	601a      	str	r2, [r3, #0]
    }
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000020 	.word	0x20000020

080005a0 <init_systick>:

void init_systick(uint32_t s){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

    // Clear CTRL register
    SysTick->CTRL = 0x00000;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <init_systick+0x48>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
    // Main clock source is running with HSI by default which is at 8 Mhz.
    // SysTick clock source can be set with CTRL register (Bit 2)
    // 0: Processor clock/8 (AHB/8)
    // 1: Processor clock (AHB)
    SysTick->CTRL |= (1 << 2);
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <init_systick+0x48>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <init_systick+0x48>)
 80005b4:	2104      	movs	r1, #4
 80005b6:	430a      	orrs	r2, r1
 80005b8:	601a      	str	r2, [r3, #0]
    // Enable callback (bit 1)
    SysTick->CTRL |= (1 << 1);
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <init_systick+0x48>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <init_systick+0x48>)
 80005c0:	2102      	movs	r1, #2
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]
    // Load the value
    SysTick->LOAD = (uint32_t)(s-1);
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <init_systick+0x48>)
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	3a01      	subs	r2, #1
 80005cc:	605a      	str	r2, [r3, #4]
    // Set the current value to 0
    SysTick->VAL = 0;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <init_systick+0x48>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
    // Enable SysTick (bit 0)
    SysTick->CTRL |= (1 << 0);
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <init_systick+0x48>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <init_systick+0x48>)
 80005da:	2101      	movs	r1, #1
 80005dc:	430a      	orrs	r2, r1
 80005de:	601a      	str	r2, [r3, #0]
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b002      	add	sp, #8
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	e000e010 	.word	0xe000e010

080005ec <delay_ms>:




void delay_ms(uint32_t s)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    tDelay = s;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <delay_ms+0x24>)
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
    while(tDelay != 0);
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <delay_ms+0x24>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1fb      	bne.n	80005fc <delay_ms+0x10>
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000020 	.word	0x20000020

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000618:	f000 f826 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	; (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000642:	f000 f843 	bl	80006cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f000 f81b 	bl	8000680 <main>

0800064a <LoopForever>:

LoopForever:
    b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000658:	08000764 	.word	0x08000764
  ldr r2, =_sbss
 800065c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000660:	20000024 	.word	0x20000024

08000664 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC_COMP_IRQHandler>
	...

08000668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <SystemInit+0x14>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	0512      	lsls	r2, r2, #20
 8000672:	609a      	str	r2, [r3, #8]
#endif
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <main>:
#include "stm32g0xx.h"
#include "BSP.h"
#include "system_stm32g0xx.h"


int main(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

	openClock('A');
 8000684:	2041      	movs	r0, #65	; 0x41
 8000686:	f7ff fdc9 	bl	800021c <openClock>
	setMode('A',6U,'O');
 800068a:	224f      	movs	r2, #79	; 0x4f
 800068c:	2106      	movs	r1, #6
 800068e:	2041      	movs	r0, #65	; 0x41
 8000690:	f7ff fe00 	bl	8000294 <setMode>

	 init_systick(SystemCoreClock/1000);
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <main+0x48>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	22fa      	movs	r2, #250	; 0xfa
 800069a:	0091      	lsls	r1, r2, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff fd31 	bl	8000104 <__udivsi3>
 80006a2:	0003      	movs	r3, r0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f7ff ff7b 	bl	80005a0 <init_systick>

	while(1){
		delay_ms(1000);
 80006aa:	23fa      	movs	r3, #250	; 0xfa
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff ff9c 	bl	80005ec <delay_ms>
		GPIOA-> ODR ^= (1U << 6);
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	23a0      	movs	r3, #160	; 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2140      	movs	r1, #64	; 0x40
 80006c0:	404a      	eors	r2, r1
 80006c2:	615a      	str	r2, [r3, #20]
		delay_ms(1000);
 80006c4:	e7f1      	b.n	80006aa <main+0x2a>
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000000 	.word	0x20000000

080006cc <__libc_init_array>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	2600      	movs	r6, #0
 80006d0:	4d0c      	ldr	r5, [pc, #48]	; (8000704 <__libc_init_array+0x38>)
 80006d2:	4c0d      	ldr	r4, [pc, #52]	; (8000708 <__libc_init_array+0x3c>)
 80006d4:	1b64      	subs	r4, r4, r5
 80006d6:	10a4      	asrs	r4, r4, #2
 80006d8:	42a6      	cmp	r6, r4
 80006da:	d109      	bne.n	80006f0 <__libc_init_array+0x24>
 80006dc:	2600      	movs	r6, #0
 80006de:	f000 f819 	bl	8000714 <_init>
 80006e2:	4d0a      	ldr	r5, [pc, #40]	; (800070c <__libc_init_array+0x40>)
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <__libc_init_array+0x44>)
 80006e6:	1b64      	subs	r4, r4, r5
 80006e8:	10a4      	asrs	r4, r4, #2
 80006ea:	42a6      	cmp	r6, r4
 80006ec:	d105      	bne.n	80006fa <__libc_init_array+0x2e>
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	00b3      	lsls	r3, r6, #2
 80006f2:	58eb      	ldr	r3, [r5, r3]
 80006f4:	4798      	blx	r3
 80006f6:	3601      	adds	r6, #1
 80006f8:	e7ee      	b.n	80006d8 <__libc_init_array+0xc>
 80006fa:	00b3      	lsls	r3, r6, #2
 80006fc:	58eb      	ldr	r3, [r5, r3]
 80006fe:	4798      	blx	r3
 8000700:	3601      	adds	r6, #1
 8000702:	e7f2      	b.n	80006ea <__libc_init_array+0x1e>
 8000704:	0800075c 	.word	0x0800075c
 8000708:	0800075c 	.word	0x0800075c
 800070c:	0800075c 	.word	0x0800075c
 8000710:	08000760 	.word	0x08000760

08000714 <_init>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071a:	bc08      	pop	{r3}
 800071c:	469e      	mov	lr, r3
 800071e:	4770      	bx	lr

08000720 <_fini>:
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000726:	bc08      	pop	{r3}
 8000728:	469e      	mov	lr, r3
 800072a:	4770      	bx	lr
